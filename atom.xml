<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[linfan's blog]]></title>
  <link href="http://linfan.info/atom.xml" rel="self"/>
  <link href="http://linfan.info/"/>
  <updated>2017-04-17T22:42:14+08:00</updated>
  <id>http://linfan.info/</id>
  <author>
    <name><![CDATA[linfan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[整理几个旧项目]]></title>
    <link href="http://linfan.info/blog/2014/09/06/some-old-projects/"/>
    <updated>2014-09-06T15:17:04+08:00</updated>
    <id>http://linfan.info/blog/2014/09/06/some-old-projects</id>
    <content type="html"><![CDATA[<p>翻出来几个多年前的旧项目，顺手发布到GitHub。</p>

<h3><a href="https://github.com/cdfmr/deebook">DeeBook</a></h3>

<p>多年前EXE电子书大行其道，而且大部分都是基于IE的，DeeBook就是此类电子书的通用反编译器。</p>

<h3><a href="https://github.com/cdfmr/neopop-ezx">NeoPop-EZX</a></h3>

<p>古董手机Moto E680i上的NGP模拟器。</p>

<h3><a href="https://github.com/cdfmr/smsplus-ezx">SMSPlus-EZX</a></h3>

<p>古董手机Moto E680i上的SMS/GG模拟器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PEDIY：解除雷电2对光盘的依赖]]></title>
    <link href="http://linfan.info/blog/2014/08/10/pediy-raiden2/"/>
    <updated>2014-08-10T09:18:44+08:00</updated>
    <id>http://linfan.info/blog/2014/08/10/pediy-raiden2</id>
    <content type="html"><![CDATA[<p>雷电2的经典毋庸置疑，由于街机模拟的不完善，其PC版仍旧是体验这款游戏的最佳方式。在遥远的1997年，限于当时的软硬件环境，PC版采用CD音轨作为背景音乐，运行时需要光盘或虚拟光驱，既不方便又占用大量存储空间。因此我一直希望有一个方便的版本，不依赖光盘但保留背景音乐以获取完整的游戏体验。经过一番努力，终于成功使用Ogg音乐文件代替CD音轨回放，完美解除了雷电2对光盘的依赖。本文是此次逆向工程的记录，仅限于技术研究，勿用于破解及盗版用途。</p>

<!--more-->


<p>以下记录基于雷电2英文版，可执行文件Raidenii.exe，文件日期1997-12-1 23:12，CRC值B14D0DE9。</p>

<h2>分析</h2>

<ul>
<li><p>反汇编主程序Raidenii.exe，根据其导入的API函数以及字符串资源等信息，可以得知雷电2使用DirectSound实现音效，而使用MCI实现背景音乐的回放，两者没有共用代码。</p></li>
<li><p>搜索代码中所有对MCI函数的调用，发现只有mciSendCommand及mciGetErrorString，并进一步分析MCI命令代码及函数的输入参数和返回值，整理如下（音量控制使用auxSetVolume，勿遗漏）。</p>

<ul>
<li><p>int proc_00402E70()<br/>
获取音量控制设备，保存设备ID到某全局变量中。</p></li>
<li><p>int proc_00402F20()<br/>
初始化CD回放设备，同样保存设备ID到某全局变量中。</p></li>
<li><p>int proc_00402FA0()<br/>
关闭CD回放设备。</p></li>
<li><p>int proc_00402FF0()<br/>
停止播放。</p></li>
<li><p>int proc_00403040(unsigned char)<br/>
播放音轨，参数为音轨编号。</p></li>
<li><p>int proc_00403100()<br/>
暂停播放。</p></li>
<li><p>int proc_00403140()<br/>
恢复播放。</p></li>
<li><p>int proc_00403180(unsigned char, int, int, int)<br/>
获取CD音轨的参数如音轨长度等，第一个参数为音轨编号，其余参数为输出参数，用于记录音轨长度等数据。</p></li>
<li><p>int proc_004031F0(int)<br/>
获取MCI错误的文字描述，参数为错误代码（MCIERROR）。</p></li>
<li><p>int proc_00403260(int, int, int)<br/>
MCI消息处理函数，三个参数为设备ID、WPARAM及LPARAM，用于在一条音轨播放结束时切换到新的音轨。</p></li>
<li><p>int proc_004032C0(int)<br/>
设置音量，参数为0~100。</p></li>
<li><p>0040692D ~ 00406AF6<br/>
位于WinMain函数，光盘检测的相关代码。</p></li>
</ul>
</li>
<li><p>由上面的分析不难看出，雷电2的背景音乐回放并不复杂，并且模块化相当好，编写一个新的模块，实现以上这些功能进行替换是可行的。整理初步的方案如下。</p>

<ul>
<li><p>采用Ogg作为新的背景音乐，并使用Audiere音频库实现回放，编写一个DLL文件实现以上接口。</p></li>
<li><p>由于部分函数如获取音量控制设备、获取音轨参数等不再使用，无需实现。</p></li>
<li><p>Audiere的回调方式不同于MCI，并非使用消息系统，因此在初始化时将消息处理函数作为参数输入并记录下来，在Audiere回调事件发生时进行调用。</p></li>
<li><p>将新编写的DLL注入到Raidenii.exe，并修改以上函数的实现，改为调用DLL中的相关代码。</p></li>
</ul>
</li>
</ul>


<h2>准备工作</h2>

<ul>
<li><p>提取CD音轨</p>

<p>  压缩为Ogg文件，保存到游戏所在目录的MUSIC子目录中，依次命名为 BGM01.OGG ~ BGM11.OGG。</p></li>
<li><p>编写fakecd.dll</p>

<p>  <div><script src='https://gist.github.com/7458344d8b3f2616a829.js'></script>
<noscript><pre><code>#include &lt;windows.h&gt;</p>

<h1>include &lt;string.h&gt;</h1>

<h1>include &lt;stdio.h&gt;</h1>

<h1>include &quot;audiere.h&quot;</h1>

<p>using namespace audiere;</p></li>
</ul>


<h1>define FAKECD_API __declspec(dllexport)</h1>

<p>AudioDevicePtr g_device = 0;
OutputStreamPtr g_stream = 0;
StopCallbackPtr g_callback = 0;
unsigned int g_volume = 100;
signed int (*g_stop_callback)(int, int, int) = 0;</p>

<h1>ifdef NDEBUG</h1>

<pre><code>#define dbgprint(format, args...)
</code></pre>

<h1>else</h1>

<pre><code>#define dbgprint(format, args...) \
{ \
    char buffer[1024]; \
    sprintf(buffer, format, ##args); \
    OutputDebugString(buffer); \
}
</code></pre>

<h1>endif</h1>

<p>class fakecd_stop_callback : public RefImplementation&lt;StopCallback&gt;
{
public:</p>

<pre><code>void ADR_CALL streamStopped(StopEvent* event)
{
    if (event-&amp;gt;getReason() == StopEvent::STREAM_ENDED)
    {
        dbgprint(&amp;quot;FAKECD_CALLBACK&amp;quot;);

        if (g_stop_callback)
            g_stop_callback(0, 0, 0);
    }
}
</code></pre>

<p>};</p>

<p>extern &quot;C&quot;
{</p>

<p>FAKECD_API DWORD fakecd_init(signed int (*stop_callback)(int, int, int))
{</p>

<pre><code>dbgprint(&amp;quot;FAKECD_INIT: %d&amp;quot;, (int)stop_callback);

g_device = OpenDevice();
if (!g_device)
    return EXIT_FAILURE;

g_callback = new fakecd_stop_callback();
g_device-&amp;gt;registerCallback(g_callback.get());
g_stop_callback = stop_callback;

return EXIT_SUCCESS;
</code></pre>

<p>}</p>

<p>FAKECD_API DWORD fakecd_play(unsigned char track)
{</p>

<pre><code>dbgprint(&amp;quot;FAKECD_PLAY: %d&amp;quot;, (int)track);

if (!g_device)
    return EXIT_FAILURE;

char base_path[MAX_PATH];
HMODULE happ = GetModuleHandle(0);
GetModuleFileName(happ, base_path, MAX_PATH);
int i = strlen(base_path) - 1;
while (i &amp;gt; 0 &amp;amp;&amp;amp; base_path[i] != '\\') i--;
base_path[i] = 0;

char ogg_path[MAX_PATH];
sprintf(ogg_path, &amp;quot;%s\\MUSIC\\BGM%02d.OGG&amp;quot;, base_path, track);
dbgprint(&amp;quot;FILE: %s&amp;quot;, ogg_path);
g_stream = OpenSound(g_device, ogg_path, true, FF_OGG);
if (!g_stream)
    return EXIT_FAILURE;

g_stream-&amp;gt;setVolume(g_volume / 100.0);
g_stream-&amp;gt;play();

return EXIT_SUCCESS;
</code></pre>

<p>}</p>

<p>FAKECD_API DWORD fakecd_pause()
{</p>

<pre><code>dbgprint(&amp;quot;FAKECD_PAUSE&amp;quot;);

if (g_stream)
    g_stream-&amp;gt;stop();

return EXIT_SUCCESS;
</code></pre>

<p>}</p>

<p>FAKECD_API DWORD fakecd_resume()
{</p>

<pre><code>dbgprint(&amp;quot;FAKECD_RESUME&amp;quot;);

if (g_stream)
    g_stream-&amp;gt;play();

return EXIT_SUCCESS;
</code></pre>

<p>}</p>

<p>FAKECD_API DWORD fakecd_stop()
{</p>

<pre><code>dbgprint(&amp;quot;FAKECD_STOP&amp;quot;);

fakecd_pause();
g_stream = 0;

return EXIT_SUCCESS;
</code></pre>

<p>}</p>

<p>FAKECD_API DWORD fakecd_set_volume(unsigned int volume)
{</p>

<pre><code>dbgprint(&amp;quot;FAKECD_VOLUME: %d&amp;quot;, (int)volume);

g_volume = volume;
if (g_volume &amp;gt; 100)
    g_volume = 100;

if (g_stream)
    g_stream-&amp;gt;setVolume(g_volume / 100.0);

return EXIT_SUCCESS;
</code></pre>

<p>}</p>

<p>FAKECD_API DWORD fakecd_uninit()
{</p>

<pre><code>dbgprint(&amp;quot;FAKECD_UNINIT&amp;quot;);

fakecd_stop();

g_device = 0;
g_callback = 0;

return EXIT_SUCCESS;
</code></pre>

<p>}</p>

<p>BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{</p>

<pre><code>if (fdwReason == DLL_PROCESS_DETACH)
    fakecd_uninit();

return TRUE;
</code></pre>

<p>}</p>

<p>}
</code></pre></noscript></div></p>

<h2>动手术</h2>

<ul>
<li><p>使用LordPE编辑Raidenii.exe，在其导入表中添加fakecd.dll导出的接口函数，并记录下所有新导入函数的地址。</p></li>
<li><p>修改Raidenii.exe，调用fakecd.dll实现背景音乐回放。</p>

<p>  <div><script src='https://gist.github.com/0515e9f2f63e77c4ac5b.js'></script>
<noscript><pre><code>;跳过光盘检测
0040692D    E9 C5010000      JMP 00406AF7</p></li>
</ul>


<p>;初始化设备
00402F20    60               PUSHAD                          ;保留作案现场
00402F21    68 60324000      PUSH 00403260                   ;回调函数
00402F26    FF15 74E0CB00    CALL DWORD PTR DS:[fakecd_init] ;偷梁换柱
00402F2C    83C4 04          ADD ESP,4                       ;平衡堆栈
00402F2F    61               POPAD                           ;恢复现场
00402F30    33C0             XOR EAX,EAX                     ;返回值
00402F32    C3               RETN</p>

<p>;暂停播放
00403100    60               PUSHAD
00403101    FF15 78E0CB00    CALL DWORD PTR DS:[fakecd_pause]
00403107    61               POPAD
00403108    33C0             XOR EAX,EAX
0040310A    C3               RETN</p>

<p>;播放
00403040    33DB             XOR EBX,EBX
00403042    8A5C24 04        MOV BL,BYTE PTR SS:[ESP+4] ;音轨编号
00403046    4B               DEC EBX                    ;校正，因为第一条轨道是数据轨
00403047    60               PUSHAD
00403048    53               PUSH EBX
00403049    FF15 7CE0CB00    CALL DWORD PTR DS:[fakecd_play]
0040304F    83C4 04          ADD ESP,4
00403052    61               POPAD
00403053    33C0             XOR EAX,EAX
00403055    C3               RETN</p>

<p>;恢复播放
00403140    60               PUSHAD
00403141    FF15 80E0CB00    CALL DWORD PTR DS:[fakecd_resume]
00403147    61               POPAD
00403148    33C0             XOR EAX,EAX
0040314A    C3               RETN</p>

<p>;设置音量
004032C0    8B4C24 04        MOV ECX,DWORD PTR SS:[ESP+4] ;音量参数
004032C4    60               PUSHAD
004032C5    51               PUSH ECX
004032C6    FF15 84E0CB00    CALL DWORD PTR DS:[fakecd_set_volume]
004032CC    83C4 04          ADD ESP,4
004032CF    61               POPAD
004032D0    33C0             XOR EAX,EAX
004032D2    C3               RETN</p>

<p>;停止播放
00402FF0    60               PUSHAD
00402FF1    FF15 88E0CB00    CALL DWORD PTR DS:[fakecd_stop]
00402FF7    61               POPAD
00402FF8    33C0             XOR EAX,EAX
00402FFA    A3 24174D00      MOV DWORD PTR DS:[4D1724],EAX ;下一条音轨，原有逻辑，下同
00402FFF    A3 20174D00      MOV DWORD PTR DS:[4D1720],EAX ;播放状态
00403004    C3               RETN
00403005    90               NOP                           ;填充
00403006    90               NOP                           ;防止破坏其它指令的正常显示
00403007    90               NOP
00403008    90               NOP</p>

<p>;关闭设备
00402FA0    60               PUSHAD
00402FA1    FF15 8CE0CB00    CALL DWORD PTR DS:[fakecd_uninit&gt;]
00402FA7    61               POPAD
00402FA8    33C0             XOR EAX,EAX
00402FAA    C3               RETN</p>

<p>;回调函数（一首音乐播放完毕后触发），此函数基本未修改，只是去除了对消息参数的检测
00403260    A1 20174D00      MOV EAX,DWORD PTR DS:[4D1720]
00403265    85C0             TEST EAX,EAX
00403267    74 10            JE SHORT 00403279
00403269    60               PUSHAD
0040326A    A1 24174D00      MOV EAX,DWORD PTR DS:[4D1724]
0040326F    50               PUSH EAX
00403270    E8 CBFDFFFF      CALL 00403040
00403275    83C4 04          ADD ESP,4
00403278    61               POPAD
00403279    33C0             XOR EAX,EAX
0040327B    C3               RETN
</code></pre></noscript></div></p>

<p>收工！</p>

<h2>补充</h2>

<p>另一种方案：Hook并重新实现mciSendCommand及mciSendString（部分，覆盖游戏使用的范围），这种方案不需要对游戏本身进行太多分析，只要搜集游戏对MCI函数的调用即可，通用性也强得多。</p>

<p><a href="https://github.com/cdfmr/fakecd">参考实现</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[鼠须管输入法的几项配置]]></title>
    <link href="http://linfan.info/blog/2013/11/15/rime-ime-config/"/>
    <updated>2013-11-15T21:42:00+08:00</updated>
    <id>http://linfan.info/blog/2013/11/15/rime-ime-config</id>
    <content type="html"><![CDATA[<!--more-->


<h3>默认输入英文</h3>

<p>如果输入法默认处于英文状态，就可以删除英文输入法，直接使用Shift切换中英文输入。</p>

<p>配置文件：<code>luna_pinyin_simp.schema.yaml</code></p>

<p>配置项：<code>switches</code> &ndash;> <code>ascii mode</code> &ndash;> <code>reset</code></p>

<p>值：<code>1</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>switches:
</span><span class='line'>  - name: ascii_mode
</span><span class='line'>    reset: 1
</span><span class='line'>    states: [ 中文, 西文 ]</span></code></pre></td></tr></table></div></figure>


<h3>Shift直接输入英文</h3>

<p>默认情况下，在输入中文时按下Shift键会临时切换到英文状态，回车输入英文后恢复中文输入状态，按如下方法修改为直接输入英文并切换到英文输入状态。</p>

<p>配置文件：<code>default.yaml</code></p>

<p>配置项：<code>ascii_composer</code> &ndash;> <code>switch_key</code> &ndash;> <code>Shift_L</code> / <code>Shift_R</code></p>

<p>值：<code>commit_code</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ascii_composer:
</span><span class='line'>  good_old_caps_lock: true
</span><span class='line'>  switch_key:
</span><span class='line'>    Caps_Lock: commit_code
</span><span class='line'>    Control_L: noop
</span><span class='line'>    Control_R: noop
</span><span class='line'>    Shift_L: commit_code
</span><span class='line'>    Shift_R: commit_code</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几个非官方的OpenWrt软件包]]></title>
    <link href="http://linfan.info/blog/2013/10/15/openwrt-packages/"/>
    <updated>2013-10-15T15:08:00+08:00</updated>
    <id>http://linfan.info/blog/2013/10/15/openwrt-packages</id>
    <content type="html"><![CDATA[<p><a href="https://openwrt.org">OpenWrt</a>是一个优秀的开源路由器固件，也是一个高度可定制的Linux发行版。OpenWrt包含opkg软件包管理工具，可以从软件源中轻松安装数以千计的软件包。即便如此，有时我们还是需要从官方源之外寻找其它软件包，以满足某些特殊的需求。本文就收集了我目前使用的一些非官方软件包，其中有自己创建的，但大部分来自于第三方。</p>

<p>我的路由器是网件WNDRMAC，以下软件包适用于ar71xx系列芯片，部分软件包文件名以all结尾，说明其与硬件平台无关，也适用于其它芯片，但我只在WNDRMAC上进行过验证。</p>

<!--more-->


<h3>busybox</h3>

<p>官方源busybox中的ls命令将中文字符显示为问号，于是Google找到<a href="http://www.pppei.net/blog/post/507">ring0</a>编译的版本，在此基础上打包成ipk文件。该软件包将busybox安装于/usr/bin目录中，且只对ls命令创建了软链接，故只替换了ls命令，不会破坏预装的/bin/busybox，卸载后即可恢复为预装版本。</p>

<p><a href="http://linfan.info/blog/files/busybox-unicode_1.19.4_ar71xx.ipk">下载</a></p>

<h3>dnspod-client</h3>

<p><a href="http://www.dnspod.cn">DNSPod</a>动态域名客户端，基于<a href="http://www.vinoca.org/2012/06/10/openwrt%E4%BD%BF%E7%94%A8dnspod%E7%9A%84%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90ddns%E5%8A%9F%E8%83%BD">vinoca</a>的脚本改造而来。安装完成后，修改/etc/config/dnspod文件填入正确的用户名、密码及域名信息，并且需要在DNSPod上预先创建相应的子域名。</p>

<p><a href="http://linfan.info/blog/files/dnspod-client_1.0_all.ipk">下载</a></p>

<h3>hfs-fsck</h3>

<p>HFS+文件系统检查工具，解决HFS+文件系统只读的问题，参见<a href="http://www.geektu.com/post/2013-08-11-yong-openwrt-diy-time-capsule">原文</a>。</p>

<p><a href="http://linfan.info/blog/files/hfs-fsck_332.25-1_ar71xx.ipk">下载</a></p>

<h3>luci-app-aria2</h3>

<p>Aria2下载器的Web前端，已经忘记从哪里下载而来了。我做了部分修改，修正了脚本文件中的一些BUG，并且将<a href="https://github.com/binux/yaaw">yaaw</a>替换成了<a href="https://github.com/ziahamza/webui-aria2">webui-aria2</a>（个人喜好）。</p>

<p><a href="http://linfan.info/blog/files/luci-app-aria2_1.0_all.ipk">下载</a></p>

<h3>luci-app-file-explorer</h3>

<p>基于Web的文件浏览器（只读）。安装此软件包会重写/etc/httpd.conf文件，用于设置访问口令。OpenWrt预装时该文件是不存在的，而且在大多数情况下也不会使用。如果在安装前已经对该文件进行过配置，请注意备份。</p>

<p><a href="http://linfan.info/blog/files/luci-app-file-explorer_1.0_all.ipk">下载</a></p>

<p>最后，对软件包的原作者表示感谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Shell实现简单的Web爬虫]]></title>
    <link href="http://linfan.info/blog/2013/09/15/web-crawler-by-shell/"/>
    <updated>2013-09-15T22:47:00+08:00</updated>
    <id>http://linfan.info/blog/2013/09/15/web-crawler-by-shell</id>
    <content type="html"><![CDATA[<p>对于结构不太复杂的网页，使用grep和sed分析提取目标URL，之后使用wget下载。</p>

<p>以下是两个例子。</p>

<!--more-->


<ul>
<li>抓取<a href="http://jandan.net">煎蛋</a>“妹子图”栏目</li>
</ul>


<div><script src='https://gist.github.com/6571304.js'></script>
<noscript><pre><code>#!/bin/sh

delay=0
timeout=10
retry=2

usage()
{
    echo &quot;Usage: `basename $0` frompage topage&quot;
    exit 1
}

[ $# -ne 2 ] &amp;&amp; usage
[ $1 -le 0 ] || [ $2 -le 0 ] || [ $1 -gt $2 ] &amp;&amp; usage

page=$1
while [ $page -le $2 ] ; do
    echo &quot;[INFO] Downloading page $page ...&quot;

    imgs=`wget -q -O - http://jandan.net/ooxx/page-$page | grep -ioE '&lt;img src=&quot;http.*\.(jpg|gif)&quot; */&gt;' | sed 's/&lt;[Ii][Mm][Gg].*[Ss][Rr][Cc]\s*=\s*&quot;*//;s/[&quot; ].*//'`
    [ -z &quot;$imgs&quot; ] &amp;&amp; {
        echo &quot;[WARNING] Failed to get image list of page $page&quot;
        page=$((page+1))
        continue
    }      

    index=1
    for img in $imgs ; do
        wget -q --tries=$retry --timeout=$timeout -O &quot;$page-$index.${img##*.}&quot; &quot;$img&quot;
        if [ $? -ne 0 ] ; then
            rm -f &quot;$page-$index.${img##*.}&quot;
            echo &quot;[WARNING] Failed to download $img&quot;
        else
            index=$((index+1))
        fi
    done

    page=$((page+1))
    [ $page -le $2 ] &amp;&amp; sleep $delay
done

exit 0
</code></pre></noscript></div>


<ul>
<li>抓取<a href="http://www.panoramio.com">Panoramio</a>网站某个用户上传的所有照片</li>
</ul>


<div><script src='https://gist.github.com/6606109.js'></script>
<noscript><pre><code>#!/bin/sh

delay=0
timeout=10
retry=2

usage()
{
    echo &quot;Usage: `basename $0` userid&quot;
    exit 1
}

[ $# -ne 1 ] &amp;&amp; usage

global_index=1
page=1
while true ; do
    echo &quot;[INFO] Processing page $page&quot;
    wget -q -O .tmp http://www.panoramio.com/user/$1?photo_page=$page
    if [ $? -ne 0 ] ; then
        echo &quot;[WARNING] Can not get content of page $page&quot;
        break
    fi

    if [ -z &quot;$total&quot; ] ; then
        total=`grep -iE '&lt;a href=&quot;\/user\/.*\/stats' .tmp | head -n 1 | sed 's/.*stats&quot;&gt;//;s/&lt;.*//'`
    fi
    imgs=`grep -ioE '&lt;a href=&quot;\/photo\/[0-9]*&quot;$' .tmp | sed 's/.*\///;s/&quot;//'`
    alts=`grep -ioE '^              &gt;..*&lt;\/a&gt;$' .tmp | sed 's/&lt;.*//;s/.*&gt;//'`

    index=1
    for img in $imgs ; do
        url=http://static.panoramio.com/photos/original/$img.jpg
        alt=`{ for alt in $alts ; do echo $alt ; done } | head -n $index | tail -n 1`
        file=`echo $global_index | awk '{printf &quot;%03d&quot;, $0}'`_$alt.jpg
        index=$((index+1))
        global_index=$((global_index+1))

        if [ -f $file ] ; then
            continue
        fi

        echo &quot;[INFO] Downloading $url&quot;
        wget -q --tries=$retry --timeout=$timeout -O &quot;$file&quot; &quot;$url&quot;
        if [ $? -ne 0 ] ; then
            rm -f &quot;$file&quot;
            echo &quot;[WARNING] Failed to download $url to $file&quot;
        fi
        sleep $delay
    done

    if [ $global_index -gt $total ] ; then
        break
    fi  

    page=$((page+1))
done

rm -f .tmp

exit 0
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将GReader Archive生成的XML文件导出为HTML页面]]></title>
    <link href="http://linfan.info/blog/2013/06/22/greader-archive-to-html/"/>
    <updated>2013-06-22T23:57:00+08:00</updated>
    <id>http://linfan.info/blog/2013/06/22/greader-archive-to-html</id>
    <content type="html"><![CDATA[<p>Google Reader就要关闭了，抓紧时间用<a href="https://github.com/Aulddays/GReader-Archive">GReader Archive</a>导出订阅的文章。可是XML文件很难直接阅读，于是写了<a href="https://github.com/cdfmr/ga2html">ga2html</a>将其转换为HTML页面。</p>

<p><a href="https://github.com/cdfmr/ga2html">GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改Mountain Lion提醒列表的颜色]]></title>
    <link href="http://linfan.info/blog/2013/06/04/calendar-color/"/>
    <updated>2013-06-04T21:54:00+08:00</updated>
    <id>http://linfan.info/blog/2013/06/04/calendar-color</id>
    <content type="html"><![CDATA[<p>Mountain Lion操作系统中，提醒事项从日历应用中分离，成为了独立的应用。新的提醒事项应用不再使用颜色标记事项列表，也无法设置列表的颜色。可是，很多第三方应用，比如Fantastical以及拙作<a href="http://www.galaworks.com/lunarcal/">LunarCal</a>都会使用列表的颜色进行展示。于是写了这个小程序，用来在Mountain Lion操作系统中修改提醒列表的颜色。</p>

<p><img src="http://linfan.info/blog/images/2013-06-04-calendar-color.png" alt="CalColor" /></p>

<p><a href="http://linfan.info/blog/files/calcolor.zip">下载</a><br/>
<a href="http://linfan.info/blog/files/calcolor_src.zip">源码</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[诡异的NSURLErrorDomain －3001错误]]></title>
    <link href="http://linfan.info/blog/2012/12/27/nsurlerrordomain-3001/"/>
    <updated>2012-12-27T21:36:00+08:00</updated>
    <id>http://linfan.info/blog/2012/12/27/nsurlerrordomain-3001</id>
    <content type="html"><![CDATA[<p>最近在使用NSURLDownload下载文件时，遇到NSURLErrorDomain －3001错误，具体的错误日志如下。</p>

<p><em>The operation couldn’t be completed. (NSURLErrorDomain error -3001.)</em></p>

<p>Google无果，最后居然发现是因为目标目录只读所致。由于很难从错误信息得知真正原因，故记录于此备忘。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linode Library 离线文档]]></title>
    <link href="http://linfan.info/blog/2012/10/31/linode-library-offline/"/>
    <updated>2012-10-31T20:13:00+08:00</updated>
    <id>http://linfan.info/blog/2012/10/31/linode-library-offline</id>
    <content type="html"><![CDATA[<p><a href="https://library.linode.com">Linode Library</a>是<a href="https://www.linode.com">Linode</a>这家VPS供应商维护的一个文档库，内容涉及到Linux VPS的方方面面，包括Linux基础知识、系统安装维护、各种服务架设等。即使不使用Linode的VPS，这些文档也具有极大的参考价值，于是将它离线并打包成了CHM文件，供大家下载、查阅。</p>

<p>下载地址：<a href="http://pan.baidu.com/s/1gd4IxF1">Linode Library Offline 2012.10.31</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04上使用Postfix+Dovecot+MySQL安装支持多域名的邮件服务器]]></title>
    <link href="http://linfan.info/blog/2012/10/21/ubuntu-12-dot-04-email-server/"/>
    <updated>2012-10-21T16:14:00+08:00</updated>
    <id>http://linfan.info/blog/2012/10/21/ubuntu-12-dot-04-email-server</id>
    <content type="html"><![CDATA[<p>基本可按照Linode上的<a href="https://library.linode.com/email/postfix/dovecot-mysql-ubuntu-10.04-lucid">这篇教学</a>进行，但此文是基于Ubuntu 10.04的，在Ubuntu 12.04上安装时需要做出以下变动。</p>

<p>本文内容已经在<a href="https://hostigation.com/billing/aff.php?aff=405">Hostigation</a>的KVM-VPS上测试通过。</p>

<!--more-->


<h2>安装软件包</h2>

<p>需增加<code>dovecot-mysql</code>包。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install dovecot-mysql
</span></code></pre></td></tr></table></div></figure>


<h2>配置Postfix</h2>

<ul>
<li>最后一步编辑Postfix配置文件时，执行以下代码替换原文代码，删除了新版本Postfix不支持的一些配置项了，注意将主机名替换为你自己的主机名。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>postconf -e <span class="s1">&#39;myhostname = server.example.com&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;mydestination = server.example.com, localhost, localhost.localdomain&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;mynetworks = 127.0.0.0/8&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;message_size_limit = 30720000&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_alias_domains =&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_alias_maps = proxy:mysql:/etc/postfix/mysql-virtual_forwardings.cf, mysql:/etc/postfix/mysql-virtual_email2email.cf&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_mailbox_domains = proxy:mysql:/etc/postfix/mysql-virtual_domains.cf&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_mailbox_maps = proxy:mysql:/etc/postfix/mysql-virtual_mailboxes.cf&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_mailbox_base = /home/vmail&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_uid_maps = static:5000&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_gid_maps = static:5000&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_sasl_auth_enable = yes&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;broken_sasl_auth_clients = yes&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_sasl_authenticated_header = yes&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_use_tls = yes&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_tls_cert_file = /etc/postfix/smtpd.cert&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_tls_key_file = /etc/postfix/smtpd.key&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;proxy_read_maps = $local_recipient_maps $mydestination $virtual_alias_maps $virtual_alias_domains $virtual_mailbox_maps $virtual_mailbox_domains $relay_recipient_maps $relay_domains $canonical_maps $sender_canonical_maps $recipient_canonical_maps $relocated_maps $transport_maps $mynetworks $virtual_mailbox_limit_maps&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_transport = dovecot&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>编辑/etc/postfix/master.cf文件，取消submission配置的注释，此举可打开STARTTLS默认的587端口。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>submission inet n - n – – smtpd
</span></code></pre></td></tr></table></div></figure>


<h2>配置SASL认证服务</h2>

<p>修改文件<code>/etc/postfix/sasl/smtpd.conf</code>为如下内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pwcheck_method: saslauthd
</span><span class='line'>mech_list: plain login
</span><span class='line'>allow_plaintext: <span class="nb">true</span>
</span><span class='line'>auxprop_plugin: sql
</span><span class='line'>sql_engine: mysql
</span><span class='line'>sql_hostnames: 127.0.0.1
</span><span class='line'>sql_user: mail_admin
</span><span class='line'>sql_passwd: mail_admin_password
</span><span class='line'>sql_database: mail
</span><span class='line'>sql_select: <span class="k">select </span>password from users where <span class="nv">email</span> <span class="o">=</span> <span class="s1">&#39;%u@%r&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置Dovecot</h2>

<p>这是符合新版本Dovecot要求的<code>/etc/dovecot/dovecot.conf</code>配置文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">log_timestamp</span> <span class="o">=</span> <span class="s2">&quot;%Y-%m-%d %H:%M:%S &quot;</span>
</span><span class='line'><span class="nv">mail_location</span> <span class="o">=</span> maildir:/home/vmail/%d/%n/Maildir
</span><span class='line'>namespace <span class="o">{</span>
</span><span class='line'>  <span class="nv">inbox</span> <span class="o">=</span> yes
</span><span class='line'>  <span class="nv">location</span> <span class="o">=</span>
</span><span class='line'>  <span class="nv">prefix</span> <span class="o">=</span> INBOX.
</span><span class='line'>  <span class="nv">separator</span> <span class="o">=</span> .
</span><span class='line'>  <span class="nb">type</span> <span class="o">=</span> private
</span><span class='line'><span class="o">}</span>
</span><span class='line'>passdb <span class="o">{</span>
</span><span class='line'>  <span class="nv">args</span> <span class="o">=</span> /etc/dovecot/dovecot-sql.conf
</span><span class='line'>  <span class="nv">driver</span> <span class="o">=</span> sql
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">protocols</span> <span class="o">=</span> imap pop3
</span><span class='line'>service auth <span class="o">{</span>
</span><span class='line'>  unix_listener /var/spool/postfix/private/auth <span class="o">{</span>
</span><span class='line'>    <span class="nv">group</span> <span class="o">=</span> postfix
</span><span class='line'>    <span class="nv">mode</span> <span class="o">=</span> 0660
</span><span class='line'>    <span class="nv">user</span> <span class="o">=</span> postfix
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  unix_listener auth-master <span class="o">{</span>
</span><span class='line'>    <span class="nv">mode</span> <span class="o">=</span> 0600
</span><span class='line'>    <span class="nv">user</span> <span class="o">=</span> vmail
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="nv">user</span> <span class="o">=</span> root
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">ssl</span> <span class="o">=</span> required
</span><span class='line'><span class="nv">ssl_cert</span> <span class="o">=</span> &lt;/etc/ssl/certs/dovecot.pem
</span><span class='line'><span class="nv">ssl_key</span> <span class="o">=</span> &lt;/etc/ssl/private/dovecot.pem
</span><span class='line'>userdb <span class="o">{</span>
</span><span class='line'>  <span class="nv">args</span> <span class="o">=</span> <span class="nv">uid</span><span class="o">=</span>5000 <span class="nv">gid</span><span class="o">=</span>5000 <span class="nv">home</span><span class="o">=</span>/home/vmail/%d/%n <span class="nv">allow_all_users</span><span class="o">=</span>yes
</span><span class='line'>  <span class="nv">driver</span> <span class="o">=</span> static
</span><span class='line'><span class="o">}</span>
</span><span class='line'>protocol lda <span class="o">{</span>
</span><span class='line'>  <span class="nv">auth_socket_path</span> <span class="o">=</span> /var/run/dovecot/auth-master
</span><span class='line'>  <span class="nv">log_path</span> <span class="o">=</span> /home/vmail/dovecot-deliver.log
</span><span class='line'>  <span class="nv">postmaster_address</span> <span class="o">=</span> postmaster@example.com
</span><span class='line'><span class="o">}</span>
</span><span class='line'>protocol pop3 <span class="o">{</span>
</span><span class='line'>  <span class="nv">pop3_uidl_format</span> <span class="o">=</span> %08Xu%08Xv
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在沙盒环境中使用Finder打开文件夹]]></title>
    <link href="http://linfan.info/blog/2012/06/23/open-folder-with-finder-in-app-sandbox/"/>
    <updated>2012-06-23T15:39:00+08:00</updated>
    <id>http://linfan.info/blog/2012/06/23/open-folder-with-finder-in-app-sandbox</id>
    <content type="html"><![CDATA[<p>从6月1日开始，Apple要求所有提交到App Store的应用程序都必须运行在沙盒环境中，这可苦了我们这些悲催的码农。一则受到沙盒环境的种种限制，一些很常用的操作都没法实现；二则App Sandbox本身就是BUG重重，这个更是有理没处说。</p>

<p>举个例子，常规环境中，一般使用Shared File List API来设置程序随系统自动运行。到了沙盒环境中，Apple不许我们使用此API了，而建议使用Service Management来实现类似功能。Service Management不如传统方法直接，必须将一个Helper程序设置为启动项，由Helper程序唤起主程序，而且创建的启动项不能显示在系统设置中。这就算了，问题是Helper程序怎么也不能唤起主程序，这个BUG直到10.7.4才解决。</p>

<p>言归正传，本文要说的是另一个BUG。通常，如果需要展示某个文件夹的内容，我们会使用NSWorkspace的OpenURL方法。即使在沙盒环境中，只要已经取得了该文件夹的相关权限，此方法显然也应该没问题。但Apple不这么想，直到目前的Lion 10.7.4中，即便是打开沙盒容器中的目录都无法成功，可以在控制台看见这样的信息。</p>

<!--more-->


<p><code>CoreServicesUIAgent: Quarantine resolution refused to pid 5872 because it is not allowed to read /Users/xxxx/Library/Containers/com.xxxxx.xxxxx/Data/Library/Application Support</code></p>

<p>这显然是一个BUG，而且实际上程序是可以对沙盒目录进行读写的，不可能真的没有权限。</p>

<p>于是上网寻求解决方案，最终在<a href="http://code.google.com/p/theunarchiver/">The Unarchiver</a>的代码中找到了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">OpenFolderWithAppleScriptBecauseTheSandboxIsTerrible</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">FSRef</span> <span class="n">ref</span><span class="p">;</span>
</span><span class='line'>        <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">ref</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">FSPathMakeRef</span><span class="p">((</span><span class="n">UInt8</span> <span class="o">*</span><span class="p">)[</span><span class="n">path</span> <span class="n">fileSystemRepresentation</span><span class="p">],</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">,</span><span class="nb">NULL</span><span class="p">)</span><span class="o">!=</span><span class="n">noErr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">const</span> <span class="n">OSType</span> <span class="n">signature</span><span class="o">=</span><span class="err">&#39;</span><span class="n">MACS</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">AppleEvent</span> <span class="n">event</span><span class="o">=</span><span class="p">{</span><span class="n">typeNull</span><span class="p">,</span><span class="nb">nil</span><span class="p">};</span>
</span><span class='line'>        <span class="n">AEBuildError</span> <span class="n">builderror</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AEDesc</span> <span class="n">filedesc</span><span class="p">;</span>
</span><span class='line'>        <span class="n">AEInitializeDesc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">filedesc</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">AECoercePtr</span><span class="p">(</span><span class="n">typeFSRef</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">ref</span><span class="p">),</span><span class="n">typeAlias</span><span class="p">,</span><span class="o">&amp;</span><span class="n">filedesc</span><span class="p">)</span><span class="o">!=</span><span class="n">noErr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">AEBuildAppleEvent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">kCoreEventClass</span><span class="p">,</span><span class="n">kAEOpenDocuments</span><span class="p">,</span>
</span><span class='line'>        <span class="n">typeApplSignature</span><span class="p">,</span><span class="o">&amp;</span><span class="n">signature</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">OSType</span><span class="p">),</span>
</span><span class='line'>        <span class="n">kAutoGenerateReturnID</span><span class="p">,</span><span class="n">kAnyTransactionID</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="n">event</span><span class="p">,</span><span class="o">&amp;</span><span class="n">builderror</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;&#39;----&#39;:(@)&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">filedesc</span><span class="p">)</span><span class="o">!=</span><span class="n">noErr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AEDisposeDesc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">filedesc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AppleEvent</span> <span class="n">reply</span><span class="o">=</span><span class="p">{</span><span class="n">typeNull</span><span class="p">,</span><span class="nb">nil</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AESendMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">,</span><span class="o">&amp;</span><span class="n">reply</span><span class="p">,</span><span class="n">kAENoReply</span><span class="p">,</span><span class="n">kAEDefaultTimeout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AEDisposeDesc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reply</span><span class="p">);</span>
</span><span class='line'>        <span class="n">AEDisposeDesc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span><span class="n">apps</span><span class="o">=</span><span class="p">[</span><span class="n">NSRunningApplication</span> <span class="nl">runningApplicationsWithBundleIdentifier:</span><span class="s">@&quot;com.apple.finder&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">apps</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">]</span> <span class="nl">activateWithOptions:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看看函数名称，看来抱怨App Sandbox的人不仅仅只是我。:)</p>

<p>使用这个方法，必须在App Sandbox的授权文件中为Finder增加特例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Key:</span>   <span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">security</span><span class="p">.</span><span class="n">temporary</span><span class="o">-</span><span class="n">exception</span><span class="p">.</span><span class="n">apple</span><span class="o">-</span><span class="n">events</span>
</span><span class='line'><span class="nl">Value:</span> <span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">finder</span>
</span></code></pre></td></tr></table></div></figure>


<p>至于这样能否通过App Store的审核，要看审核人员的心情了，至少The Unarchiver是通过了，我的App还在等待审核，前途未卜。说到这个，小小发下牢骚，为了实现将文件解压到压缩包所在的目录，The Unarchiver在授权文件中加了一堆目录的读写权限；而我为了实现类似的功能（从PDF文件中提取图片）使用了相同的方法，死活不能通过审核！</p>

<p>补充：又一次被拒了，就是因为这个Finder的例外。苹果的双重标准太恶心了，而且还在文档中明确指出不能以别的App通过审核作为申诉的理由，去TNND。</p>

<p>再补充：</p>

<ul>
<li>发现一个奇怪的现象，若沙盒下的子目录是由程序创建的，无法使用NSWorkspace的openURL或openFile方法打开；若子目录通过Finder或命令行手工创建，则上述BUG不存在。比较过两种方法创建的目录，所属用户、组、权限都一样，百思不得其解。</li>
<li>NSWorkspace的selectFile:inFileViewerRootedAtPath:方法可以正常工作。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[各种OS中生成UUID的方法]]></title>
    <link href="http://linfan.info/blog/2012/04/20/uuid/"/>
    <updated>2012-04-20T20:50:00+08:00</updated>
    <id>http://linfan.info/blog/2012/04/20/uuid</id>
    <content type="html"><![CDATA[<p>开发人员或多或少都应该知道UUID或GUID，这是摘自<a href="http://zh.wikipedia.org/zh-cn/UUID">维基百科</a>的一段描述。</p>

<p><code>通用唯一识别码 (Universally Unique Identifier, UUID) 是一个软件建构的标准，亦为自由软件基金会 (Open Software Foundation, OSF) 的组织在分散式计算环境 (Distributed Computing Environment, DCE) 领域的一部份。</code></p>

<p><code>UUID 的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的 UUID。在这样的情况下，就不需考虑数据库建立时的名称重复问题。目前最广泛应用的 UUID，即是微软的 Microsoft's Globally Unique Identifiers (GUIDs)，而其他重要的应用，则有 Linux ext2/ext3 档案系统、LUKS 加密分割区、GNOME、KDE、Mac OS X 等等。另外我们也可以在 e2fsprogs 套件中的 UUID 函式库找到实作。</code></p>

<!--more-->


<p>因参与的一个项目需要在不同系统及开发环境中生成UUID，故对UUID的生成进行了一些学习，整理如下。</p>

<h2>Shell</h2>

<p>几乎所有Unix和类Unix环境中都包含了一个名为<code>uuidgen</code>的小工具，运行即可生成一个UUID。</p>

<h2>Linux/Mac OS X</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;uuid/uuid.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uuid_generate</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">uuid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">uuid_t</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02x&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Linux下编译时需要链接uuid库（-luuid），在Mac OS X下则不需要。</p>

<h2>HP-UX</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;dce/uuid.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">unsigned32</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uuid_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ret</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="n">uuid_s_ok</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">uuid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">uuid_t</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02x&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然都命名为uuid_t，但HP-UX与Linux的uuid_t的定义形式不同，前者是由long/short/char等组成的structure，后者则是单纯的char数组（两者本质上等价，只是表示形式不同），所以uuid_create与uuid_generate参数中的uuid_t形式也不同。</p>

<p>注意，uuid.h头文件位于/opt/dce/include目录下，且需要链接dcekt库（-ldcekt）。</p>

<h2>Mac OS X (Cocoa)</h2>

<p>进行Cocoa开发时，使用CFUUIDCreate函数可生成UUID，以下代码摘自<a href="http://vgable.com/blog/2008/02/24/creating-a-uuid-guid-in-cocoa/">Vincent Gable’s Blog</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="nf">stringWithUUID</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CFUUIDRef</span> <span class="n">uuidObj</span> <span class="o">=</span> <span class="n">CFUUIDCreate</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span><span class="c1">//create a new UUID</span>
</span><span class='line'>    <span class="c1">//get the string representation of the UUID</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">uuidString</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">CFUUIDCreateString</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="n">uuidObj</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">uuidObj</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">uuidString</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Windows</h2>

<p>使用API函数<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms688568%28v=vs.85%29.aspx"><code>HRESULT CoCreateGuid(__out GUID *pguid)</code></a>可生成GUID（即UUID），其中GUID类型的定义类似于HP-UX，将上文HP-UX的示范代码稍作修改即可移植到Windows平台。由于CoCreateGuid是COM函数，别忘了首先调用<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms695279%28v=vs.85%29.aspx"><code>CoInitializeEx</code></a>进行初始化。</p>

<h2>Java</h2>

<p>JDK 1.5以上内建了UUID的支持，使用非常简单。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode: 使用Git自动设置项目版本]]></title>
    <link href="http://linfan.info/blog/2012/03/27/xcode-build-number-with-git/"/>
    <updated>2012-03-27T15:13:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/27/xcode-build-number-with-git</id>
    <content type="html"><![CDATA[<p>本来一直使用SVN进行版本管理，并习惯于将代码版本（revision）作为Xcode项目的编译号（CFBundleVersion）。最近开始了解Git，被其种种美好所诱惑，于是一股脑将个人的所有项目都转移到Git，然后发现CFBundleVersion不好设置了。</p>

<!--more-->


<p>与SVN不同，Git使用散列值作为每次提交的标记，而不是像SVN那样使用递增序列，因此不便直接用作CFBundleVersion。正愁以后每次都要麻烦地手工设置了，苦思冥想一番之后豁然开朗，虽然Git没有数值化的版本号，但我可以自己数一数提交次数啊，于是有了这个脚本。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> /usr/libexec/PlistBuddy -c <span class="s2">&quot;Set :CFBundleVersion `git log | grep -P &#39;commit [\da-f]{40}&#39; | wc -l`&quot;</span> <span class="s2">&quot;${TARGET_BUILD_DIR}/${INFOPLIST_PATH}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单，数一下Git版本库的提交次数，使用PlistBuddy将其设置为CFBundleVersion。</p>

<p>顺便附上以前使用的SVN脚本，稍稍不同的是将版本号补齐到3位。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">rev</span><span class="o">=</span><span class="sb">`</span>svnversion -n<span class="sb">`</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="k">${#</span><span class="nv">rev</span><span class="k">}</span> -lt 3 <span class="o">]</span> ; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">rev</span><span class="o">=</span><span class="s2">&quot;0${rev}&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> -n <span class="s2">&quot;${TARGET_BUILD_DIR}/${INFOPLIST_PATH}&quot;</span> | xargs -0 /usr/libexec/PlistBuddy -c <span class="s2">&quot;Set :CFBundleVersion ${rev}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法：新建一个<code>Run Script</code>类型的<code>Build Phase</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现Mac应用的自我重启]]></title>
    <link href="http://linfan.info/blog/2012/03/26/mac-app-self-relaunch/"/>
    <updated>2012-03-26T19:31:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/26/mac-app-self-relaunch</id>
    <content type="html"><![CDATA[<p>对于应用程序的某些配置项，需要重新启动应用才能生效。比较友好的方式是提醒用户，并在用户确认后完成自我重启。</p>

<p>实现自我重启的方法很多，易于理解且实现简单的一种如下。</p>

<ol>
<li>启动一个子进程；</li>
<li>主进程退出；</li>
<li>子进程延时一定时间后拉起主进程，或者检测主进程已经关闭后重新拉起。</li>
</ol>


<!--more-->


<p>子进程可以是一个简单的命令行程序，不过最简易的方法莫过于使用Shell，以下是代码片段。</p>

<div><script src='https://gist.github.com/2204627.js'></script>
<noscript><pre><code>@implementation NSApplication (Relaunch)

- (void)relaunchAfterDelay:(float)seconds
{
    NSTask *task = [[[NSTask alloc] init] autorelease];
    NSMutableArray *args = [NSMutableArray array];
    [args addObject:@&quot;-c&quot;];
    [args addObject:[NSString stringWithFormat:@&quot;sleep %f; open \&quot;%@\&quot;&quot;, seconds, [[NSBundle mainBundle] bundlePath]]];
    [task setLaunchPath:@&quot;/bin/sh&quot;];
    [task setArguments:args];
    [task launch];
    
    [self terminate:nil];
}

@end</code></pre></noscript></div>


<p>以上代码只实现了延时重启，并未检测主进程状态。</p>

<p>使用方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">NSApp</span> <span class="nl">relaunchAfterDelay:</span><span class="mf">2.0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode的点滴记录]]></title>
    <link href="http://linfan.info/blog/2012/03/07/xcode-tips/"/>
    <updated>2012-03-07T09:58:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/07/xcode-tips</id>
    <content type="html"><![CDATA[<p>升级到Lion以及Xcode 4之后，发现Xcode 4在配置上与Xcode 3有些不同，记录于此备忘。</p>

<!--more-->


<h2>代码中的公司名称</h2>

<p>Xcode生成代码时，自动在文件头插入注释，其中的公司名称需要设置，否则以<code>__MyCompanyName__</code>代替。</p>

<p>Xcode 3中设置ORGANIZATIONNAME宏定义。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.Xcode PBXCustomTemplateMacroDefinitions <span class="s1">&#39;{ORGANIZATIONNAME=&quot;YourNameHere&quot;;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Xcode 4不再使用此宏定义，直接读取系统地址簿中的公司信息，所以需要在地址簿中给自己设定一个公司名称。</p>

<p>Xcode 3和Xcode 4都可以针对项目单独设置公司名称，其中Xcode 3的设置项是项目信息窗口中<code>General</code>选项卡的<code>Organization Name</code>，而Xcode 4是右边栏项目文件信息中<code>Project Document</code>分组下的<code>Organization</code>。</p>

<h2>让大括号另起一行</h2>

<p>使用Xcode自动完成功能生成的代码，左大括号是位于行末的。如果要让大括号另起一行，Xcode 3与Xcode 4的设置并不相同。</p>

<p>Xcode 3的设置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.Xcode XCCodeSenseFormattingOptions -dict BlockSeparator <span class="s2">&quot;\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Xcode 4中，自动完成功能是由代码片段库<code>Code Snippet Library</code>控制的，因此需要修改相应的代码片段模板。点击代码片段，会弹出窗口显示其内容，并提供编辑功能。但是，Apple并不允许我们修改内建的代码模板。不过，我们可以绕过Xcode进行修改。Xcode 4内建的代码片段保存在/Developer/Library/Xcode/PrivatePlugIns/IDECodeSnippetLibrary.ideplugin/Contents/Resources/SystemCodeSnippets.codesnippets文件中，这是一个plist文件，直接编辑即可。<a href="https://gist.github.com/1992813">这里</a>是我修改好的文件。</p>

<p>补充：Xcode 4.3及之后版本，代码片段位于/Applications/Xcode.app/Contents/PlugIns/IDECodeSnippetLibrary.ideplugin/Contents/Resources/SystemCodeSnippets.codesnippets文件中。</p>

<h2>烦人的调试权限问题</h2>

<p>将Lion升级到10.7.3之后，每次在Xcode 4中运行程序都会弹出如下信息提示，输入用户密码才能继续。</p>

<pre><code>“Developer Tools Access”需控制另一进程，才能继续调试。键入您的密码以允许执行此操作。
</code></pre>

<p>以及</p>

<pre><code>“gdb-i386-apple-darwin”需控制另一进程，才能继续调试。键入您的密码以允许执行此操作。
</code></pre>

<p><a href="http://stackoverflow.com/questions/9132826/stop-developer-tools-access-needs-to-take-control-of-another-process-for-debugg">Stack Overflow</a>上给出了两种解决方案。</p>

<ul>
<li><p>重新安装Xcode</p></li>
<li><p>按如下方法修改/etc/authorization文件</p></li>
</ul>


<div><script src='https://gist.github.com/1992771.js'></script>
<noscript><pre><code>--- /etc/authorization.bak 2012-03-07 10:44:43.000000000 +0800
+++ /etc/authorization  2012-03-07 10:50:41.000000000 +0800
@@ -7568,7 +7568,7 @@
            &lt;key&gt;allow-root&lt;/key&gt;
            &lt;false/&gt;
            &lt;key&gt;class&lt;/key&gt;
-           &lt;string&gt;user&lt;/string&gt;
+           &lt;string&gt;rule&lt;/string&gt;
            &lt;key&gt;comment&lt;/key&gt;
            &lt;string&gt;For use by Apple.  WARNING: administrators are advised
             not to modify this right.&lt;/string&gt;
@@ -7698,12 +7698,16 @@
                &lt;key&gt;zh-Hant&lt;/key&gt;
                &lt;string&gt;“__APPNAME__”需要控制另一個程序才能繼續除錯。&lt;/string&gt;
            &lt;/dict&gt;
-           &lt;key&gt;group&lt;/key&gt;
-           &lt;string&gt;_developer&lt;/string&gt;
            &lt;key&gt;shared&lt;/key&gt;
            &lt;true/&gt;
-           &lt;key&gt;timeout&lt;/key&gt;
-           &lt;integer&gt;36000&lt;/integer&gt;
+           &lt;key&gt;k-of-n&lt;/key&gt;
+           &lt;integer&gt;1&lt;/integer&gt;
+           &lt;key&gt;rule&lt;/key&gt;
+           &lt;array&gt;
+               &lt;string&gt;is-admin&lt;/string&gt;
+               &lt;string&gt;is-developer&lt;/string&gt;
+               &lt;string&gt;authenticate-developer&lt;/string&gt;
+           &lt;/array&gt;
        &lt;/dict&gt;
        &lt;key&gt;system.privilege.taskport.safe&lt;/key&gt;
        &lt;dict&gt;</code></pre></noscript></div>


<p>没有验证第一种方法，第二种方法经验证有效（修改前切记备份原文件）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HP-UX中SFTP的一个小问题]]></title>
    <link href="http://linfan.info/blog/2012/03/05/hpux-sftp/"/>
    <updated>2012-03-05T22:44:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/05/hpux-sftp</id>
    <content type="html"><![CDATA[<p>最近工作的一个项目，使用<a href="http://www.libssh2.org">libssh2</a>在HP-UX环境下实现SFTP的文件传输。测试时发现一个问题，使用libssh2_sftp_rename重命名文件时，若目标文件已经存在，总是不能成功。使用libssh2_sftp_last_error得到的错误代码是LIBSSH2_FX_FAILURE(4)，基本没有参考价值；另外可排除用户权限因素。</p>

<!--more-->


<p>查阅libssh2的文档及include/libssh2_sftp.h文件，得知libssh2_sftp_rename实际是libssh2_sftp_rename_ex的宏定义，该宏传入的flags参数是LIBSSH2_SFTP_RENAME_OVERWRITE | LIBSSH2_SFTP_RENAME_ATOMIC | LIBSSH2_SFTP_RENAME_NATIVE，即包含了覆盖已存在文件的选项，可为什么还是失败呢？继续追查libssh2_sftp_rename_ex的实现，逐步跟踪到src/sftp.c文件中的sftp_rename函数，发现这段代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">sftp</span><span class="o">-&gt;</span><span class="n">version</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">_libssh2_store_u32</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sftp</span><span class="o">-&gt;</span><span class="n">rename_s</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是flags参数唯一出现的地方，也就是说只有SFTP服务器协议版本不小于5时，重命名的那些选项才有效，HP-UX上出现的很有可能就是这种情况。为了证实，使用系统内建的sftp工具连接，输入version命令，得到以下输出。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sftp</span><span class="o">&gt;</span> <span class="n">version</span>
</span><span class='line'><span class="n">SFTP</span> <span class="n">protocol</span> <span class="n">version</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然，SFTP服务协议版本就是造成这个问题的原因，解决办法很简单，重命名文件之前调用libssh2_sftp_unlink删除目标文件即可。libssh2应该在文档中说明SFTP服务协议版本对相关函数的影响。</p>

<p>此问题在HP-UX B.11.31/IA-64和B.11.11/PA-RISC中都存在。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Wine在Mac OS X中运行Windows程序]]></title>
    <link href="http://linfan.info/blog/2012/03/01/wine-mac/"/>
    <updated>2012-03-01T00:06:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/01/wine-mac</id>
    <content type="html"><![CDATA[<p>目前，在Mac OS X中运行Windows程序，不外乎两种方法。一是在虚拟机软件如<a href="http://www.virtualbox.org">VirtualBox</a>、<a href="http://www.vmware.com/mac">VMware Fusion</a>、<a href="http://www.parallels.com/products/desktop/">Parallels Desktop</a>中安装完整的Windows操作系统；另一种则是利用<a href="http://www.winehq.org">Wine</a>或其商业版本<a href="http://www.codeweavers.com">Crossover Office</a>直接运行Windows软件。</p>

<p>Wine的名字是一个有意思的缩写，Wine Is Not an Emulator，如其所表，Wine并非虚拟机，它实现功能的方法是提供对Windows API的兼容，从而使Windows程序能够运行在Linux/Mac OS X操作系统中。与虚拟机相比，Wine的运行效率和系统资源占用都有很大优势，但兼容性会差一些，不过很多软件包括Office、Photoshop之类的大型软件都能运行。<a href="http://appdb.winehq.org">这里</a>有一个Wine的兼容性列表。</p>

<p>本文谈一下Wine在Mac OS X中的安装和配置。</p>

<!--more-->


<h2>Wine的安装</h2>

<p>通过<a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装Wine非常简单，输入以下命令即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install wine --devel
</span></code></pre></td></tr></table></div></figure>


<p>命令中的<code>--devel</code>参数表示安装开发版，否则默认安装稳定版。Wine的开发版本也足够稳定，不必担心，而其兼容性会高于稳定版。</p>

<p>安装完成后，在终端运行<code>winecfg</code>，可以调出Wine的配置面板，同时也会创建<code>~/.wine</code>目录。输入<code>wine program.exe</code>这样的命令就可以运行Windows程序了，比如<code>wine winemine.exe</code>可启动Wine自带的扫雷游戏。</p>

<h2>字体平滑</h2>

<p>Wine支持字体平滑，默认情况下未开启，下载这个注册表文件并使用<code>wine regedit wine_smoothfonts.reg</code>导入即可开启字体平滑。</p>

<div><script src='https://gist.github.com/1947925.js'></script>
<noscript><pre><code>REGEDIT4

[HKEY_CURRENT_USER\Control Panel\Desktop]
&quot;FontSmoothing&quot;=&quot;2&quot;
&quot;FontSmoothingType&quot;=dword:00000002
&quot;FontSmoothingGamma&quot;=dword:00000578
&quot;FontSmoothingOrientation&quot;=dword:00000001</code></pre></noscript></div>


<h2>中文字体替换</h2>

<p>使用Wine运行中文软件，发现汉字都显示成方块，这是因为Wine在使用默认的英文字体渲染汉字时，不会自动调用中文字体进行替换，我们可以在注册表中指明字体替换规则来解决。我选择了使用<a href="http://wenq.org/index.cgi?MicroHei">文泉驿微米黑</a>字体来替换，你可以根据自己的喜好进行修改，比如使用Mac OS X的冬青黑字体。</p>

<p>下载<a href="http://downloads.sourceforge.net/project/wqy/wqy-microhei/0.2.0-beta/wqy-microhei-0.2.0-beta.tar.gz">文泉驿微米黑</a>字体文件，解压其中的<code>wqy-microhei.ttc</code>文件到<code>~/.wine/drive_c/windows/Fonts</code>目录中，或者直接安装到Mac OS X系统中。然后下载下面的注册表文件，使用<code>wine regedit wine_fontsubstitutes_wqymicrohei.reg</code>导入。使用系统字体时，将文件中的<code>WenQuanYi Micro Hei</code>和<code>WenQuanYi Micro Hei Mono</code>替换成相应的系统字体名称，且不需要另外安装到<code>~/.wine</code>目录中，Wine会自动扫描系统字体。</p>

<div><script src='https://gist.github.com/1947935.js'></script>
<noscript><pre><code>REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]
&quot;Arial&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Comic Sans MS&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Courier&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Courier New&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Fixedsys&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Helv&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Helvetica&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Lucida Console&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Lucida Sans&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Microsoft Sans Serif&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MingLiU&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;PMingLiu&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;MS Shell Dlg&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Shell Dlg 2&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Dialog&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS PGothic&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;MS UI Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Mincho&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS PMincho&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;SimHei&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;SimSun&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;NSimSun&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;System&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Tahoma&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Times&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Times New Roman&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Tms Rmn&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Trebuchet MS&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Verdana&quot;=&quot;WenQuanYi Micro Hei&quot;</code></pre></noscript></div>


<p>此外，需要在<code>~/.bash_profile</code>中增加以下两行，否则文件名中的汉字还是乱码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LC_CTYPE</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span></code></pre></td></tr></table></div></figure>


<h2>输入法</h2>

<p>补充：从1.6版本开始，Wine默认使用Mac原生驱动，不再依赖于X11，请略过此节。</p>

<p>Wine的UI渲染是基于X11环境的，无法使用Mac OS X原生的输入法，需要另外安装基于X11的输入法。经过试验，Fcitx 3.5可以顺利安装。以下安装和配置步骤同样基于<a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew create http://www.fcitx.org/download/fcitx-3.5-070703.tar.bz2
</span></code></pre></td></tr></table></div></figure>


<p>补充：官方的下载地址已经失效，可以从<a href="http://files.linfan.info/fcitx-3.5-070703.tar.bz2">这里</a>下载。</p>

<p>下载完成后，Homebrew会自动打开创建的编译脚本进行编辑，在<code>system "make install"</code>之前增加一行<code>system "make"</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install fcitx
</span></code></pre></td></tr></table></div></figure>


<p>在<code>~/.bash_profile</code>中增加一行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">XMODIFIERS</span><span class="o">=</span><span class="s2">&quot;@im=fcitx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装完成后，运行<code>fcitx</code>，之后按<code>⌃C</code>结束，这会让Fcitx创建它的配置文件。编辑<code>~/.fcitx/profile</code>，将<code>主窗口位置Y</code>的值修改为22以上，这样Fcitx的状态条就不会被菜单栏挡住了（菜单栏的高度是22）。新版XQuartz中，这个步骤不是必须，因为X服务器在计算坐标时已经考虑了菜单栏的存在。Fcitx的所有设置都可以在<code>~/.fcitx/profile</code>和<code>~/.fcitx/config</code>这两个文件中修改，请参考Fcitx的相关文档。</p>

<p>输入汉字时，必须先运行Fcitx，可以让Fcitx随X11自动启动。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write org.x.X11 app_to_run /usr/local/bin/fcitx
</span></code></pre></td></tr></table></div></figure>


<p>如果使用XQuartz而非系统预装的X11，输入以下命令设置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write org.macosforge.xquartz.X11 app_to_run /usr/local/bin/fcitx
</span></code></pre></td></tr></table></div></figure>


<h2>程序菜单</h2>

<p>将常用的Windows程序放置到X11的<code>应用程序</code>菜单中，就不需要使用命令行操作了；也可以利用Automator把它们包装成Mac应用。推荐使用Automator，同时启动Fcitx和Windows应用，效果完美，参见如下截图。</p>

<p><img src="http://linfan.info/blog/images/2012-03-01-wine-mac_launchpad.jpg" alt="launchpad" /></p>

<p><img src="http://linfan.info/blog/images/2012-03-01-wine-mac_automator.png" alt="automator" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X下读写ext2/ext3文件系统]]></title>
    <link href="http://linfan.info/blog/2012/02/29/mac-ext2fs/"/>
    <updated>2012-02-29T09:24:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/29/mac-ext2fs</id>
    <content type="html"><![CDATA[<p>我的移动硬盘上，有个分区是ext2文件系统的，不能在Mac OS X中挂载。幸好，在开源世界里，我们总是能找到各种问题的解决方法，感谢无私的开发者。</p>

<p><a href="http://fuse-ext2.sourceforge.net">fuse-ext2</a>是ext2文件系统在<a href="http://fuse.sourceforge.net">FUSE</a>上的实现，支持Linux和Mac OS X。FUSE是在操作系统用户态下实现的文件系统，源自Linux，Mac OS X的移植版本主要有三个，<a href="http://code.google.com/p/macfuse/">MacFUSE</a>、<a href="http://fuse4x.org">Fuse4X</a>和<a href="http://osxfuse.github.com">OSXFUSE</a>，其中，MacFUSE已经停止开发，后二者是MacFUSE的继承者。Fuse4X和OSXFUSE都把对FUSE最新API的支持作为项目目标，但Fuse4X不提供对MacFUSE旧版本接口的兼容，OSXFUSE则同时兼容MacFUSE旧接口。fuse-ext2二进制安装包是基于MacFUSE编译的，所以我们选择OSXFUSE，获取最佳的功能与兼容性。</p>

<!--more-->


<p>分别下载<a href="https://github.com/osxfuse/osxfuse/downloads">OSXFUSE</a>和<a href="http://sourceforge.net/projects/fuse-ext2/files/">fuse-ext2</a>的.dmg二进制包并安装。<strong>注意：安装OSXFUSE时，一定要勾选<code>MacFUSE Compatibility Layer</code></strong>。安装完成后重启，就可以自动挂载ext2/ext3文件系统了。当然，也可以使用mount命令挂载，<code>mount -t fuse-ext2 &lt;device&gt; &lt;mountpoint&gt;</code>。</p>

<p>默认情况下，fuse-ext2进行只读挂载，可以修改<code>/System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util</code>文件进行读写挂载。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vi /System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util
</span></code></pre></td></tr></table></div></figure>


<p>修改Mount函数（第200行前后），为OPTIONS变量增加<code>rw+</code>标志。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>Mount <span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    LogDebug <span class="s2">&quot;[Mount] Entering function Mount...&quot;</span>
</span><span class='line'>    <span class="c"># Setting both defer_auth and defer_permissions. The option was renamed</span>
</span><span class='line'>    <span class="c"># starting with MacFUSE 1.0.0, and there seems to be no backward</span>
</span><span class='line'>    <span class="c"># compatibility on the options.</span>
</span><span class='line'>    <span class="nv">OPTIONS</span><span class="o">=</span><span class="s2">&quot;auto_xattr,defer_permissions,rw+&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># The local option is only enabled on Leopard. It causes strange</span>
</span><span class='line'>    ...
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Finder中对ext2/ext3文件系统进行写操作，时常出现<code>error code -36</code>错误，但在终端中使用命令行则没有任何问题，可能是FUSE和Mac OS X的兼容性导致。</p>

<p>虽然名为fuse-ext2，实际也支持ext3的读写，只是不支持ext3文件系统的日志。</p>

<p>OSXFUSE和fuse-ext2都可以在系统偏好设置中卸载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa菜单栏右侧图标的实现]]></title>
    <link href="http://linfan.info/blog/2012/02/28/cocoa-icon-on-right-side-of-menu-bar/"/>
    <updated>2012-02-28T21:35:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/28/cocoa-icon-on-right-side-of-menu-bar</id>
    <content type="html"><![CDATA[<p>与Windows中的Tray Icon不同，Mac OS X中类似的UI元素位于屏幕右上角菜单栏的右侧，官方命名为Status Item，我们可以使用NSStatusBar和NSStatusItem类在菜单栏上为自己的应用添加图标。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSStatusBar</span> <span class="o">*</span><span class="n">statusBar</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSStatusBar</span> <span class="n">systemStatusBar</span><span class="p">];</span>
</span><span class='line'><span class="n">NSStatusItem</span> <span class="o">*</span><span class="n">statusItem</span> <span class="o">=</span> <span class="p">[</span><span class="n">statusBar</span> <span class="nl">statusItemWithLength:</span><span class="n">NSVariableStatusItemLength</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setImage:</span><span class="n">image</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setMenu:</span><span class="n">menu</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setHighlightMode:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="n">retain</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用这种方法创建的图标，位于菜单栏图标区域的最左侧，如果菜单栏上图标太多，很容易就被程序菜单遮挡了。那么，有没有办法在菜单栏的右侧添加图标呢？</p>

<!--more-->


<p>根据Apple的开发文档，这是不可能实现的。不过，Apple留了后门，通过调用NSStatusBar类的一些非公开API，是可以将图标移动到菜单栏右侧的。我们来看看怎么做。</p>

<p>首先要声明将要调用的非公开API。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">NSStatusBar</span> <span class="nl">(NSStatusBar_Private)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">_statusItemWithLength:</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="nv">l</span> <span class="nf">withPriority:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">p</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">_insertStatusItem:</span><span class="p">(</span><span class="n">NSStatusItem</span> <span class="o">*</span><span class="p">)</span><span class="nv">i</span> <span class="nf">withPriority:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">p</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>与NSStatusBar的常规接口相比，最关键的是新增的withPriority参数，这个参数指明了图标的优先级，实际上就是图标在菜单栏上的位置。</p>

<p>那么，怎么使用这两个API呢？根据我从茫茫网络收集的资料，有不完全相同的两种方法，各有优劣。</p>

<p><strong>方法一</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">statusBar</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">_statusItemWithLength:withPriority:</span><span class="p">)]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">statusBar</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">_insertStatusItem:withPriority:</span><span class="p">)])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">priority</span> <span class="o">=</span> <span class="n">INT_MAX</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statusItem</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">statusItem</span> <span class="o">=</span> <span class="p">[</span><span class="n">statusBar</span> <span class="nl">_statusItemWithLength:</span><span class="mi">0</span> <span class="nl">withPriority:</span><span class="n">priority</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">statusItem</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">statusBar</span> <span class="nl">removeStatusItem:</span><span class="n">statusItem</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">statusBar</span> <span class="nl">_insertStatusItem:</span><span class="n">statusItem</span> <span class="nl">withPriority:</span><span class="n">priority</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">statusItem</span> <span class="nl">setLength:</span><span class="n">NSVariableStatusItemLength</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>方法二</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">restartSystemUIServer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSTask</span> <span class="o">*</span><span class="n">killSystemUITask</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSTask</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">args</span> <span class="nl">addObject:</span><span class="s">@&quot;SystemUIServer&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">args</span> <span class="nl">addObject:</span><span class="s">@&quot;-HUP&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">killSystemUITask</span> <span class="nl">setLaunchPath:</span><span class="s">@&quot;/usr/bin/killall&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">killSystemUITask</span> <span class="nl">setArguments:</span><span class="n">args</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">killSystemUITask</span> <span class="n">launch</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">createStatusBar</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">statusBar</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">_statusItemWithLength:withPriority:</span><span class="p">)])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statusItem</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">statusItem</span> <span class="o">=</span> <span class="p">[</span><span class="n">statusBar</span> <span class="nl">_statusItemWithLength:</span><span class="mi">0</span> <span class="nl">withPriority:</span><span class="n">INT_MAX</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">statusItem</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">statusItem</span> <span class="nl">setLength:</span><span class="n">NSVariableStatusItemLength</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">restartSystemUIServer</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法一不需要重新启动SystemUIServer服务，但是在Lion的全屏模式下，右侧一部分会被Spotlight的图标所遮挡；方法二没有此问题，但重启SystemUIServer服务的过程会删除菜单栏上所有图标并重建，视觉效果不好。</p>

<p>另外，方法一在Snow Leopard下运行时，如果用户输入<code>killall SystemUIServer</code>重启SystemUIServer服务，会导致图标错位到Spotlight图标的右侧。解决方法是捕获系统的“com.apple.menuextra.added”通知（这个通知也是非公开的），调用方法一重新添加图标。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">NSDistributedNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>                                                    <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">menuExtrasWereAddedHandler:</span><span class="p">)</span>
</span><span class='line'>                                                        <span class="nl">name:</span><span class="s">@&quot;com.apple.menuextra.added&quot;</span>
</span><span class='line'>                                                      <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>两种方法都在Snow Leopard和Lion操作系统中通过测试。</p>

<p>另，Mac OS X系统内建的各种图标并非由上述方法创建，而使用了另一个非公开的类NSMenuExtra，可以按住⌘键拖动调整位置。</p>

<p>方法一来自<a href="http://code.google.com/p/tunnelblick/">Tunnelblick</a>项目，方法二来自<a href="http://shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock">Day-O</a>作者Shaun Inman的指导，特此感谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X下使用bindfs实现mount的目录绑定功能]]></title>
    <link href="http://linfan.info/blog/2012/02/28/bindfs-on-mac/"/>
    <updated>2012-02-28T00:02:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/28/bindfs-on-mac</id>
    <content type="html"><![CDATA[<p>Linux下的mount命令有一个<code>--bind</code>参数，将目录挂载到另一个目录下。Mac OS X的mount命令不支持<code>--bind</code>，不过我们可以使用<a href="http://code.google.com/p/bindfs/">bindfs</a>实现相同的功能。</p>

<p>bindfs是一个基于<a href="http://fuse.sourceforge.net/">FUSE</a>的文件系统实现，并非Mac OS X的预装工具，但通过<a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装非常简单。</p>

<!--more-->


<p><code>brew install bindfs</code></p>

<p>Homebrew会自动安装bindfs以及其依赖的gettext和fuse4x。如果出现未找到pkg-config的错误，请先输入<code>brew install pkg-config</code>安装。</p>

<p>安装完成后，需要在系统启动时加载FUSE内核扩展。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp -rfX /usr/local/Cellar/fuse4x-kext/0.8.14/Library/Extensions/fuse4x.kext /System/Library/Extensions
</span><span class='line'>sudo chmod +s /System/Library/Extensions/fuse4x.kext/Support/load_fuse4x
</span></code></pre></td></tr></table></div></figure>


<p>重启生效。</p>

<p>bindfs的使用也非常简单，跟<code>mount --bind</code>基本一样。</p>

<p><code>bindfs 源目录 挂载点</code></p>

<p>更多信息可以在终端里输入<code>man bindfs</code>查阅。</p>
]]></content>
  </entry>
  
</feed>
