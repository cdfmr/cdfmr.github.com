<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[linfan's blog]]></title>
  <link href="http://linfan.info/atom.xml" rel="self"/>
  <link href="http://linfan.info/"/>
  <updated>2012-02-27T21:10:49+08:00</updated>
  <id>http://linfan.info/</id>
  <author>
    <name><![CDATA[linfan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[让Mac OS X的终端多姿多彩]]></title>
    <link href="http://linfan.info/blog/2012/02/27/colorful-terminal-in-mac/"/>
    <updated>2012-02-27T13:57:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/27/colorful-terminal-in-mac</id>
    <content type="html"><![CDATA[<p>与Linux相比，Mac OS X的终端总是欠缺些什么。对了，是色彩，Linux的ls命令使用不同颜色区分各种文件类型，Vim编辑器也支持语法高亮，而Mac终端却总是以黑白示人。其实，只要稍微做一些工作，Mac的终端同样可以多姿多彩，请往下看。</p>

<!--more-->


<h2>彩色化ls的输出</h2>

<p>Mac中BSD的ls命令可以使用<code>-G</code>参数彩色化输出的文件列表，需要配置LSCOLORS环境变量定义颜色，具体配置方法可以输入<code>man ls</code>查看。</p>

<p>不过，我推荐安装Linux使用的GNU Coreutils替换Mac的ls命令，因为：</p>

<ul>
<li>Coreutils提供了配置工具，定义颜色代码更加方便；</li>
<li>Coreutils包含的不仅仅是ls，作为曾经的Linux用户，我更习惯于使用GNU的各种shell工具。</li>
</ul>


<p>Coreutils的安装与配置方法如下：</p>

<ol>
<li><p>通过<a href="../../../../2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装Coreutils<br/>
<code>brew install xz coreutils</code><br/>
注：Coreutils并不依赖于xz，但它的源码是用xz格式压缩的，安装xz才能解压。</p></li>
<li><p>生成颜色定义文件<br/>
<code>gdircolors --print-database &gt; ~/.dir_colors</code></p></li>
<li><p>在<code>~/.bash_profile</code>配置文件中加入以下代码</p></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span>brew list | grep coreutils &gt; /dev/null ; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$(brew --prefix coreutils)/libexec/gnubin:$PATH&quot;</span>
</span><span class='line'>  <span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls -F --show-control-chars --color=auto&#39;</span>
</span><span class='line'>  <span class="nb">eval</span> <span class="sb">`</span>gdircolors -b <span class="nv">$HOME</span>/.dir_colors<span class="sb">`</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>gdircolor的作用就是设置ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS），我们可以修改~/.dir_colors自定义文件的颜色，此文件中的注释已经包含各种颜色取值的说明。</p>

<p>看看默认颜色的显示效果。<br/>
<img src="../../../../images/2012-02-27-colorful-terminal-in-mac_ls.png" alt="ls screenshot" /></p>

<h2>grep高亮显示关键字</h2>

<p>这个很简单，加上<code>--color</code>参数就可以了，为了使用方便，可以在<code>~/.bash_profile</code>配置文件中加上alias定义。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">grep</span><span class="o">=</span><span class="s1">&#39;grep --color&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">egrep</span><span class="o">=</span><span class="s1">&#39;egrep --color&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">fgrep</span><span class="o">=</span><span class="s1">&#39;fgrep --color&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Vim语法高亮</h2>

<p>在Vim中输入命令<code>:syntax on</code>激活语法高亮，若需要Vim启动时自动激活，在<code>~/.vimrc</code>中添加一行<code>syntax on</code>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew的安装与使用]]></title>
    <link href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/"/>
    <updated>2012-02-25T19:50:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage</id>
    <content type="html"><![CDATA[<p>Mac OS X是基于Unix的操作系统，可以安装大部分为Unix/Linux开发的软件。然而，如果只是以使用为目的，对每个软件都进行手工编译不是很方便，也不利于管理已安装的软件，于是出现了类似于Linux中APT、Yum等类似的软件包管理系统，其中最著名的有MacPorts、Fink、Homebrew等。</p>

<p>我曾经是MacPorts的使用者，但了解Homebrew之后，立即“弃暗投明”了。其实MacPorts也是一个很不错的解决方案，除了一个实在让我头疼的特性。MacPorts有个原则，对于软件包之间的依赖，都在MacPorts内部解决（/opt/local），无论系统本身是否包含了需要的库，都不会加以利用。这使得MacPorts过分的庞大臃肿，导致系统出现大量软件包的冗余，占用不小的磁盘空间，同时稍大型一点的软件编译时间都会难以忍受。</p>

<p>而Homebrew的原则恰恰相反，它尽可能地利用系统自带的各种库，使得软件包的编译时间大为缩短；同时由于几乎不会造成冗余，软件包的管理也清晰、灵活了许多。Homebrew的另一个特点是使用Ruby定义软件包安装配置（叫做formula），定制非常简单。</p>

<p>至于Fink，由于并未安装使用过，不加讨论。（从互联网上的消息看，Fink由于维护人手的问题，软件包的更新不是很及时。）于我而言，Homebrew已经足够完善，除非发现重大的问题或者出现新的具有突破性的竞争对手，否则我没兴趣折腾别的软件包管理系统了。</p>

<p>下面说说Homebrew的安装与使用。</p>

<!--more-->


<h2>Homebrew的安装</h2>

<p>首先确保你的系统满足如下要求：</p>

<ol>
<li>基于Intel CPU</li>
<li>操作系统为Mac OS X 10.5 Leopard或更高版本</li>
<li>已安装版本管理工具Git（Mac OS X 10.7 Lion已经预安装）</li>
<li>已安装Xcode开发工具<sup>1</sup></li>
<li>已安装Java Developer Update<sup>2</sup></li>
</ol>


<p>注1：Xcode 4.3中，命令行编译工具是可选安装，需要在<code>Preferences</code> > <code>Downloads</code>中激活。<br/>
注2：可选，Homebrew本身不依赖于Java，只有部分软件包的安装需要Java支持。</p>

<p>Homebrew的安装非常简单，在终端程序中输入以下命令即可。</p>

<p><code>/usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"</code></p>

<p>安装过程需要输入root口令。</p>

<h2>Homebrew的使用</h2>

<p>Homebrew的可执行命令是brew，其基本使用方法如下（以wget为例）。</p>

<p>查找软件包<br/>
<code>brew search wget</code></p>

<p>安装软件包<br/>
<code>brew install wget</code></p>

<p>列出已安装的软件包<br/>
<code>brew list</code></p>

<p>删除软件包<br/>
<code>brew remove wget</code></p>

<p>查看软件包信息<br/>
<code>brew info wget</code></p>

<p>列出软件包的依赖关系<br/>
<code>brew deps wget</code></p>

<p>更新brew<br/>
<code>brew update</code></p>

<p>列出过时的软件包（已安装但不是最新版本）<br/>
<code>brew outdated</code></p>

<p>更新过时的软件包（全部或指定）<br/>
<code>brew upgrade</code> 或 <code>brew upgrade wget</code></p>

<h2>定制自己的软件包</h2>

<p>如果自己需要的软件包并不能在Homebrew中找到，怎么办呢，毕竟Homebrew是一个新生项目，不可能满足所有人的需求。当然，我们可以自行编译安装，但手工安装的软件包游离于Homebrew之外，管理起来不是很方便。</p>

<p>前文说过，Homebrew使用Ruby实现的软件包配置非常方便，下面简单谈一谈软件包的定制（假定软件包名称是bar，来自foo站点）。</p>

<ol>
<li><p>首先找到待安装软件的源码下载地址<br/>
<code>http://foo.com/bar-1.0.tgz</code></p></li>
<li><p>建立自己的formula<br/>
<code>brew create http://foo.com/bar-1.0.tgz</code></p></li>
<li><p>编辑formula，上一步建立成功后，Homebrew会自动打开新建的formula进行编辑，也可用如下命令打开formula进行编辑。<br/>
<code>brew edit bar</code><br/>
Homebrew自动建立的formula已经包含了基本的<code>configure</code>和<code>make install</code>命令，对于大部分软件，不需要进行修改，退出编辑即可。</p></li>
<li><p>输入以下命令安装自定义的软件包<br/>
<code>brew install bar</code></p></li>
</ol>


<h2></h2>

<p>关于Homebrew的其它功能，比如将自定义软件包提交到官方发布等，请参考Homebrew项目的<a href="http://mxcl.github.com/homebrew/">主页</a>及其Man Page。你将发现Homebrew不仅是“家酿”，更是“佳酿”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打造完美的Drupal编辑器]]></title>
    <link href="http://linfan.info/blog/2012/02/23/perfect-drupal-editor/"/>
    <updated>2012-02-23T10:06:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/23/perfect-drupal-editor</id>
    <content type="html"><![CDATA[<p>一个Octopress架设的博客，怎么上来就是一篇Drupal的文章呢？很简单，本来是打算用Drupal来架设个人博客的，结果在上线前发现了Octopress，于是叛逃了 :) 。尽管不再使用Drupal，但安装Drupal过程中的一些经验还是值得记录与分享的。</p>

<p>言归正传，Drupal预设的编辑器过于简陋，而我当时对“完美”的定义是：可视化、图像上传、代码高亮，并且使用 <a href="http://ckeditor.com/">CKEditor</a> + <a href="http://drupal.org/project/imce">IMCE</a> + <a href="http://alexgorbatchev.com/">SyntaxHighlighter</a> 实现了预期目标。以下是安装过程，基于Drupal 7环境。</p>

<!--more-->


<h2>安装CKEditor</h2>

<p>CKEditor是最好的在线HTML编辑器之一，也是将要实现的Drupal编辑器的核心组成部分。</p>

<p>下载<a href="http://download.cksource.com/CKEditor%20for%20Drupal/CKEditor%203.6.2%20for%20Drupal/ckeditor_3.6.2_for_drupal_7.zip">CKEditor 3.6 for Drupal 7</a>并在Drupal模块管理界面中安装（也可直接通过URL安装）。启用CKEditor，此时Drupal已经有了一个不错的所见即所得编辑器。</p>

<h2>安装IMCE</h2>

<p>IMCE是一个文件管理器，用于实现图像文件的上传。其实，CKEditor本身就捆绑了一个非常好的文件管理器CKFinder，但CKFinder是收费软件（CKEditor是免费/收费双重授权的，我们使用其免费授权），故使用免费的IMCE进行替换，本文也不讨论CKFinder的配置。</p>

<p>下载<a href="http://ftp.drupal.org/files/projects/imce-7.x-1.5.tar.gz">IMCE</a>，安装并启用。</p>

<p>进入CKEditor的配置页面，编辑<code>Advanced</code>配置档案，展开<code>FILE BROWSER SETTINGS</code>，可以看到<code>File browser type</code>设置为<code>CKFinder</code>，将其修改为<code>IMCE</code>。按同样方法修改<code>Full</code>配置档案。</p>

<h2>代码高亮</h2>

<p>到目前为止，Drupal编辑器已经基本成型了，可以应付绝大部分的编辑需要。不过作为<del> 酷毙 </del>苦逼的码农，怎么能缺少代码高亮功能呢。</p>

<p>代码高亮可以通过SyntaxHighlighter实现，并且只支持<code>Full HTML</code>文本格式。相对于CKEditor和IMCE，这个东东的安装会复杂一些，慢慢道来。</p>

<p>1. 下载<a href="http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current">SyntaxHighlighter</a>，解压到<code>sites/all/libraries</code>目录下（新安装的Drupal是没有这个目录的，需要手工创建）。为什么不在模块管理界面中安装呢，因为这只是一个Javascript库，不是Drupal模块。</p>

<p>2. 下载<a href="http://ftp.drupal.org/files/projects/syntaxhighlighter-7.x-2.x-dev.tar.gz">SyntaxHighlighter的Drupal模块</a>，安装并启用。</p>

<p>3. 进入<code>SyntaxHighlighter</code>的配置页面，勾选需要支持的语言，保存设置。<strong>注意：不要修改代码使用的标签名称，因为之后安装的某个插件只识别默认的&lt;pre>标签</strong>。</p>

<p>4. 进入<code>文本格式</code>的配置页面，编辑<code>Full HTML</code>格式，在<code>启用过滤器</code>分组中勾选<code>Syntax highlighter</code>，并在<code>过滤器处理顺序</code>中将其置为第一个；取消选择<code>将换行符号转换为HTML</code>，否则代码换行处会插入&lt;br>标签。保存设置。</p>

<p>OK，现在新建一篇文章，选择格式为<code>Full HTML</code>，点击CKEditor工具栏左上的<code>Source</code>按钮切换到源文件模式，输入以下内容，预览一下，是不是已经可以显示代码高亮了？</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">&quot;brush:cpp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>    printf(&quot;Hello, World!\n&quot;);
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'><span class="nt">&lt;/code&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>让CKEditor支持代码高亮</h2>

<p>这样显然不够，虽然实现了代码高亮显示，但怎样才能在CKEditor中直接输入代码呢？我们需要安装一个叫做<a href="http://code.google.com/p/ckeditor-syntaxhighlight/">ckeditor-syntaxhighlight</a>的插件。</p>

<p>1. 下载<a href="http://ckeditor-syntaxhighlight.googlecode.com/files/ckeditor-syntaxhighlight-1.0.tar.bz2">ckeditor-syntaxhighlight</a>，将其中的<code>ckeditor-syntaxhighlight/plugins/syntaxhighlight</code>解压到<code>sites/all/modules/ckeditor/ckeditor/plugins</code>目录下。</p>

<p>2. 编辑<code>sites/all/modules/ckeditor/includes/ckeditor.lib.inc</code>文件，在<code>ckeditor_load_plugins</code>函数的<code>CKEditor build-in plugins</code>段中加入以下代码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">file_exists</span><span class="p">(</span><span class="err">$</span><span class="n">_editor_path</span> <span class="o">.</span> <span class="s">&#39;plugins/syntaxhighlight/plugin.js&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">$</span><span class="n">arr</span><span class="p">[</span><span class="s">&#39;syntaxhighlight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>        <span class="s">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;syntaxhighlight&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;desc&#39;</span> <span class="o">=&gt;</span> <span class="n">t</span><span class="p">(</span><span class="s">&#39;Syntaxhighlight plugin&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="err">$</span><span class="n">base_path</span> <span class="o">.</span> <span class="err">$</span><span class="n">editor_path</span> <span class="o">.</span> <span class="s">&#39;plugins/syntaxhighlight/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;default&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;f&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3. 编辑<code>sites/all/modules/ckeditor/ckeditor.config.js</code>文件，在<code>Drupal.settings.cke_toolbar_DrupalFull</code>数组的最后加入<code>'Code'</code>，即数组内容的最后一行修改为<code>['DrupalBreak', 'DrupalPageBreak', 'Code']</code>，保存。</p>

<p>4. 进入CKEditor的配置页面，编辑<code>Full</code>配置档案，展开<code>EDITOR APPEARANCE</code>，在<code>Plugins</code>分组中勾选<code>Syntaxhighlight plugin</code>，保存设置。</p>

<p>好了，新建一篇<code>Full HTML</code>格式的文章，看看CKEditor工具栏上最后一排是不是新增了一个<code>code</code>按钮，点击一下看看。如果看不到新增的按钮，在CKEditor的<code>Full</code>配置中，展开<code>EDITOR APPEARANCE</code>，在<code>工具栏</code>分组中，重新<code>Load sample toolbar: Full</code>，保存设置。</p>

<p>大功告成！</p>

<h2>题外话</h2>

<p>如果你是一名程序员，不排斥控制台操作方式，并且只想简简单单地写一写博客，强烈推荐<a href="http://octopress.org">Octopress</a>，个中好处请自行<a href="http://www.google.com/search?q=Octopress">Google</a>之。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Octopress!]]></title>
    <link href="http://linfan.info/blog/2012/02/22/hello-octopress/"/>
    <updated>2012-02-22T10:15:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/22/hello-octopress</id>
    <content type="html"><![CDATA[

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;hello octopress&quot;</span><span class="o">]</span>
</span><span class='line'>vi <span class="nb">source</span>/_post/2012-02-22-hello-octopress.markdown
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
