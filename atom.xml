<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[linfan's blog]]></title>
  <link href="http://linfan.info/atom.xml" rel="self"/>
  <link href="http://linfan.info/"/>
  <updated>2012-10-24T00:12:35+08:00</updated>
  <id>http://linfan.info/</id>
  <author>
    <name><![CDATA[linfan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04上使用Postfix+Dovecot+MySQL安装支持多域名的邮件服务器]]></title>
    <link href="http://linfan.info/blog/2012/10/21/ubuntu-12-dot-04-email-server/"/>
    <updated>2012-10-21T16:14:00+08:00</updated>
    <id>http://linfan.info/blog/2012/10/21/ubuntu-12-dot-04-email-server</id>
    <content type="html"><![CDATA[<p>基本可按照Linode上的<a href="https://library.linode.com/email/postfix/dovecot-mysql-ubuntu-10.04-lucid#sph_setting-up-domains-and-users">这篇教学</a>进行，但此文是基于Ubuntu 10.04的，在Ubuntu 12.04上安装时需要做出以下变动。</p>

<p>本文内容已经在<a href="https://hostigation.com/billing/aff.php?aff=405">Hostigation</a>的KVM-VPS上测试通过。</p>

<!--more-->


<h2>安装软件包</h2>

<p>需增加<code>dovecot-mysql</code>包。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install dovecot-mysql
</span></code></pre></td></tr></table></div></figure>


<h2>配置Postfix</h2>

<ul>
<li>最后一步编辑<code>postfix.conf</code>文件时，执行以下代码替换原文代码，删除了新版本Postfix不支持的一些配置项了，注意将主机名替换为你自己的主机名。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>postconf -e <span class="s1">&#39;myhostname = server.example.com&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;mydestination = server.example.com, localhost, localhost.localdomain&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;mynetworks = 127.0.0.0/8&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;message_size_limit = 30720000&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_alias_domains =&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_alias_maps = proxy:mysql:/etc/postfix/mysql-virtual_forwardings.cf, mysql:/etc/postfix/mysql-virtual_email2email.cf&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_mailbox_domains = proxy:mysql:/etc/postfix/mysql-virtual_domains.cf&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_mailbox_maps = proxy:mysql:/etc/postfix/mysql-virtual_mailboxes.cf&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_mailbox_base = /home/vmail&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_uid_maps = static:5000&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_gid_maps = static:5000&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_sasl_auth_enable = yes&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;broken_sasl_auth_clients = yes&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_sasl_authenticated_header = yes&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_use_tls = yes&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_tls_cert_file = /etc/postfix/smtpd.cert&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;smtpd_tls_key_file = /etc/postfix/smtpd.key&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;proxy_read_maps = $local_recipient_maps $mydestination $virtual_alias_maps $virtual_alias_domains $virtual_mailbox_maps $virtual_mailbox_domains $relay_recipient_maps $relay_domains $canonical_maps $sender_canonical_maps $recipient_canonical_maps $relocated_maps $transport_maps $mynetworks $virtual_mailbox_limit_maps&#39;</span>
</span><span class='line'>postconf -e <span class="s1">&#39;virtual_transport = dovecot&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>编辑/etc/postfix/master.cf文件，取消submission配置的注释，此举可打开STARTTLS默认的587端口。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>submission inet n - n – – smtpd
</span></code></pre></td></tr></table></div></figure>


<h2>配置SASL认证服务</h2>

<p>修改文件<code>/etc/postfix/sasl/smtpd.conf</code>为如下内容。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pwcheck_method: saslauthd
</span><span class='line'>mech_list: plain login
</span><span class='line'>allow_plaintext: <span class="nb">true</span>
</span><span class='line'>auxprop_plugin: sql
</span><span class='line'>sql_engine: mysql
</span><span class='line'>sql_hostnames: 127.0.0.1
</span><span class='line'>sql_user: mail_admin
</span><span class='line'>sql_passwd: mail_admin_password
</span><span class='line'>sql_database: mail
</span><span class='line'>sql_select: <span class="k">select </span>password from users where <span class="nv">email</span> <span class="o">=</span> <span class="s1">&#39;%u@%r&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置Dovecot</h2>

<p>这是符合新版本Dovecot要求的<code>/etc/dovecot/dovecot.conf</code>配置文件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">log_timestamp</span> <span class="o">=</span> <span class="s2">&quot;%Y-%m-%d %H:%M:%S &quot;</span>
</span><span class='line'><span class="nv">mail_location</span> <span class="o">=</span> maildir:/home/vmail/%d/%n/Maildir
</span><span class='line'>namespace <span class="o">{</span>
</span><span class='line'>  <span class="nv">inbox</span> <span class="o">=</span> yes
</span><span class='line'>  <span class="nv">location</span> <span class="o">=</span>
</span><span class='line'>  <span class="nv">prefix</span> <span class="o">=</span> INBOX.
</span><span class='line'>  <span class="nv">separator</span> <span class="o">=</span> .
</span><span class='line'>  <span class="nb">type</span> <span class="o">=</span> private
</span><span class='line'><span class="o">}</span>
</span><span class='line'>passdb <span class="o">{</span>
</span><span class='line'>  <span class="nv">args</span> <span class="o">=</span> /etc/dovecot/dovecot-sql.conf
</span><span class='line'>  <span class="nv">driver</span> <span class="o">=</span> sql
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">protocols</span> <span class="o">=</span> imap pop3
</span><span class='line'>service auth <span class="o">{</span>
</span><span class='line'>  unix_listener /var/spool/postfix/private/auth <span class="o">{</span>
</span><span class='line'>    <span class="nv">group</span> <span class="o">=</span> postfix
</span><span class='line'>    <span class="nv">mode</span> <span class="o">=</span> 0660
</span><span class='line'>    <span class="nv">user</span> <span class="o">=</span> postfix
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  unix_listener auth-master <span class="o">{</span>
</span><span class='line'>    <span class="nv">mode</span> <span class="o">=</span> 0600
</span><span class='line'>    <span class="nv">user</span> <span class="o">=</span> vmail
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="nv">user</span> <span class="o">=</span> root
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">ssl</span> <span class="o">=</span> required
</span><span class='line'><span class="nv">ssl_cert</span> <span class="o">=</span> &lt;/etc/ssl/certs/dovecot.pem
</span><span class='line'><span class="nv">ssl_key</span> <span class="o">=</span> &lt;/etc/ssl/private/dovecot.pem
</span><span class='line'>userdb <span class="o">{</span>
</span><span class='line'>  <span class="nv">args</span> <span class="o">=</span> <span class="nv">uid</span><span class="o">=</span>5000 <span class="nv">gid</span><span class="o">=</span>5000 <span class="nv">home</span><span class="o">=</span>/home/vmail/%d/%n <span class="nv">allow_all_users</span><span class="o">=</span>yes
</span><span class='line'>  <span class="nv">driver</span> <span class="o">=</span> static
</span><span class='line'><span class="o">}</span>
</span><span class='line'>protocol lda <span class="o">{</span>
</span><span class='line'>  <span class="nv">auth_socket_path</span> <span class="o">=</span> /var/run/dovecot/auth-master
</span><span class='line'>  <span class="nv">log_path</span> <span class="o">=</span> /home/vmail/dovecot-deliver.log
</span><span class='line'>  <span class="nv">postmaster_address</span> <span class="o">=</span> postmaster@example.com
</span><span class='line'><span class="o">}</span>
</span><span class='line'>protocol pop3 <span class="o">{</span>
</span><span class='line'>  <span class="nv">pop3_uidl_format</span> <span class="o">=</span> %08Xu%08Xv
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在沙盒环境中使用Finder打开文件夹]]></title>
    <link href="http://linfan.info/blog/2012/06/23/open-folder-with-finder-in-app-sandbox/"/>
    <updated>2012-06-23T15:39:00+08:00</updated>
    <id>http://linfan.info/blog/2012/06/23/open-folder-with-finder-in-app-sandbox</id>
    <content type="html"><![CDATA[<p>从6月1日开始，Apple要求所有提交到App Store的应用程序都必须运行在沙盒环境中，这可苦了我们这些悲催的码农。一则受到沙盒环境的种种限制，一些很常用的操作都没法实现；二则App Sandbox本身就是BUG重重，这个更是有理没处说。</p>

<p>举个例子，常规环境中，一般使用Shared File List API来设置程序随系统自动运行。到了沙盒环境中，Apple不许我们使用此API了，而建议使用Service Management来实现类似功能。Service Management不如传统方法直接，必须将一个Helper程序设置为启动项，由Helper程序唤起主程序，而且创建的启动项不能显示在系统设置中。这就算了，问题是Helper程序怎么也不能唤起主程序，这个BUG直到10.7.4才解决。</p>

<p>言归正传，本文要说的是另一个BUG。通常，如果需要展示某个文件夹的内容，我们会使用NSWorkspace的OpenURL方法。即使在沙盒环境中，只要已经取得了该文件夹的相关权限，此方法显然也应该没问题。但Apple不这么想，直到目前的Lion 10.7.4中，即便是打开沙盒容器中的目录都无法成功，可以在控制台看见这样的信息。</p>

<!--more-->


<p><code>CoreServicesUIAgent: Quarantine resolution refused to pid 5872 because it is not allowed to read /Users/xxxx/Library/Containers/com.xxxxx.xxxxx/Data/Library/Application Support</code></p>

<p>这显然是一个BUG，而且实际上程序是可以对沙盒目录进行读写的，不可能真的没有权限。</p>

<p>于是上网寻求解决方案，最终在<a href="http://code.google.com/p/theunarchiver/">The Unarchiver</a>的代码中找到了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">OpenFolderWithAppleScriptBecauseTheSandboxIsTerrible</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">FSRef</span> <span class="n">ref</span><span class="p">;</span>
</span><span class='line'>        <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">ref</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">FSPathMakeRef</span><span class="p">((</span><span class="n">UInt8</span> <span class="o">*</span><span class="p">)[</span><span class="n">path</span> <span class="n">fileSystemRepresentation</span><span class="p">],</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">,</span><span class="nb">NULL</span><span class="p">)</span><span class="o">!=</span><span class="n">noErr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">const</span> <span class="n">OSType</span> <span class="n">signature</span><span class="o">=</span><span class="err">&#39;</span><span class="n">MACS</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">AppleEvent</span> <span class="n">event</span><span class="o">=</span><span class="p">{</span><span class="n">typeNull</span><span class="p">,</span><span class="nb">nil</span><span class="p">};</span>
</span><span class='line'>        <span class="n">AEBuildError</span> <span class="n">builderror</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AEDesc</span> <span class="n">filedesc</span><span class="p">;</span>
</span><span class='line'>        <span class="n">AEInitializeDesc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">filedesc</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">AECoercePtr</span><span class="p">(</span><span class="n">typeFSRef</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">ref</span><span class="p">),</span><span class="n">typeAlias</span><span class="p">,</span><span class="o">&amp;</span><span class="n">filedesc</span><span class="p">)</span><span class="o">!=</span><span class="n">noErr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">AEBuildAppleEvent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">kCoreEventClass</span><span class="p">,</span><span class="n">kAEOpenDocuments</span><span class="p">,</span>
</span><span class='line'>        <span class="n">typeApplSignature</span><span class="p">,</span><span class="o">&amp;</span><span class="n">signature</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">OSType</span><span class="p">),</span>
</span><span class='line'>        <span class="n">kAutoGenerateReturnID</span><span class="p">,</span><span class="n">kAnyTransactionID</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="n">event</span><span class="p">,</span><span class="o">&amp;</span><span class="n">builderror</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;&#39;----&#39;:(@)&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">filedesc</span><span class="p">)</span><span class="o">!=</span><span class="n">noErr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AEDisposeDesc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">filedesc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AppleEvent</span> <span class="n">reply</span><span class="o">=</span><span class="p">{</span><span class="n">typeNull</span><span class="p">,</span><span class="nb">nil</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AESendMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">,</span><span class="o">&amp;</span><span class="n">reply</span><span class="p">,</span><span class="n">kAENoReply</span><span class="p">,</span><span class="n">kAEDefaultTimeout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AEDisposeDesc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reply</span><span class="p">);</span>
</span><span class='line'>        <span class="n">AEDisposeDesc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span><span class="n">apps</span><span class="o">=</span><span class="p">[</span><span class="n">NSRunningApplication</span> <span class="nl">runningApplicationsWithBundleIdentifier:</span><span class="s">@&quot;com.apple.finder&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">apps</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">]</span> <span class="nl">activateWithOptions:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看看函数名称，看来抱怨App Sandbox的人不仅仅只是我。:)</p>

<p>使用这个方法，必须在App Sandbox的授权文件中为Finder增加特例。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Key:</span>   <span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">security</span><span class="p">.</span><span class="n">temporary</span><span class="o">-</span><span class="n">exception</span><span class="p">.</span><span class="n">apple</span><span class="o">-</span><span class="n">events</span>
</span><span class='line'><span class="nl">Value:</span> <span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">finder</span>
</span></code></pre></td></tr></table></div></figure>


<p>至于这样能否通过App Store的审核，要看审核人员的心情了，至少The Unarchiver是通过了，我的App还在等待审核，前途未卜。说到这个，小小发下牢骚，为了实现将文件解压到压缩包所在的目录，The Unarchiver在授权文件中加了一堆目录的读写权限；而我为了实现类似的功能（从PDF文件中提取图片）使用了相同的方法，死活不能通过审核！</p>

<p>补充：又一次被拒了，就是因为这个Finder的例外。苹果的双重标准太恶心了，而且还在文档中明确指出不能以别的App通过审核作为申诉的理由，去TNND。</p>

<p>再补充：</p>

<ul>
<li>发现一个奇怪的现象，若沙盒下的子目录是由程序创建的，无法使用NSWorkspace的openURL或openFile方法打开；若子目录通过Finder或命令行手工创建，则上述BUG不存在。比较过两种方法创建的目录，所属用户、组、权限都一样，百思不得其解。</li>
<li>NSWorkspace的selectFile:inFileViewerRootedAtPath:方法可以正常工作。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[各种OS中生成UUID的方法]]></title>
    <link href="http://linfan.info/blog/2012/04/20/uuid/"/>
    <updated>2012-04-20T20:50:00+08:00</updated>
    <id>http://linfan.info/blog/2012/04/20/uuid</id>
    <content type="html"><![CDATA[<p>开发人员或多或少都应该知道UUID或GUID，这是摘自<a href="http://zh.wikipedia.org/zh-cn/UUID">维基百科</a>的一段描述。</p>

<p><code>通用唯一识别码 (Universally Unique Identifier, UUID) 是一个软件建构的标准，亦为自由软件基金会 (Open Software Foundation, OSF) 的组织在分散式计算环境 (Distributed Computing Environment, DCE) 领域的一部份。</code></p>

<p><code>UUID 的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的 UUID。在这样的情况下，就不需考虑数据库建立时的名称重复问题。目前最广泛应用的 UUID，即是微软的 Microsoft's Globally Unique Identifiers (GUIDs)，而其他重要的应用，则有 Linux ext2/ext3 档案系统、LUKS 加密分割区、GNOME、KDE、Mac OS X 等等。另外我们也可以在 e2fsprogs 套件中的 UUID 函式库找到实作。</code></p>

<!--more-->


<p>因参与的一个项目需要在不同系统及开发环境中生成UUID，故对UUID的生成进行了一些学习，整理如下。</p>

<h2>Shell</h2>

<p>几乎所有Unix和类Unix环境中都包含了一个名为<code>uuidgen</code>的小工具，运行即可生成一个UUID。</p>

<h2>Linux/Mac OS X</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;uuid/uuid.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uuid_generate</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">uuid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">uuid_t</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02x&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Linux下编译时需要链接uuid库（-luuid），在Mac OS X下则不需要。</p>

<h2>HP-UX</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;dce/uuid.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">unsigned32</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uuid_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ret</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="n">uuid_s_ok</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">uuid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">uuid_t</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02x&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然都命名为uuid_t，但HP-UX与Linux的uuid_t的定义形式不同，前者是由long/short/char等组成的structure，后者则是单纯的char数组（两者本质上等价，只是表示形式不同），所以uuid_create与uuid_generate参数中的uuid_t形式也不同。</p>

<p>注意，uuid.h头文件位于/opt/dce/include目录下，且需要链接dcekt库（-ldcekt）。</p>

<h2>Mac OS X (Cocoa)</h2>

<p>进行Cocoa开发时，使用CFUUIDCreate函数可生成UUID，以下代码摘自<a href="http://vgable.com/blog/2008/02/24/creating-a-uuid-guid-in-cocoa/">Vincent Gable’s Blog</a>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">+</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">stringWithUUID</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CFUUIDRef</span> <span class="n">uuidObj</span> <span class="o">=</span> <span class="n">CFUUIDCreate</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span><span class="c1">//create a new UUID</span>
</span><span class='line'>    <span class="c1">//get the string representation of the UUID</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">uuidString</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">CFUUIDCreateString</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="n">uuidObj</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">uuidObj</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">uuidString</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Windows</h2>

<p>使用API函数<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms688568%28v=vs.85%29.aspx"><code>HRESULT CoCreateGuid(__out GUID *pguid)</code></a>可生成GUID（即UUID），其中GUID类型的定义类似于HP-UX，将上文HP-UX的示范代码稍作修改即可移植到Windows平台。由于CoCreateGuid是COM函数，别忘了首先调用<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms695279%28v=vs.85%29.aspx"><code>CoInitializeEx</code></a>进行初始化。</p>

<h2>Java</h2>

<p>JDK 1.5以上内建了UUID的支持，使用非常简单。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode: 使用Git自动设置项目版本]]></title>
    <link href="http://linfan.info/blog/2012/03/27/xcode-build-number-with-git/"/>
    <updated>2012-03-27T15:13:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/27/xcode-build-number-with-git</id>
    <content type="html"><![CDATA[<p>本来一直使用SVN进行版本管理，并习惯于将代码版本（revision）作为Xcode项目的编译号（CFBundleVersion）。最近开始了解Git，被其种种美好所诱惑，于是一股脑将个人的所有项目都转移到Git，然后发现CFBundleVersion不好设置了。</p>

<!--more-->


<p>与SVN不同，Git使用散列值作为每次提交的标记，而不是像SVN那样使用递增序列，因此不便直接用作CFBundleVersion。正愁以后每次都要麻烦地手工设置了，苦思冥想一番之后豁然开朗，虽然Git没有数值化的版本号，但我可以自己数一数提交次数啊，于是有了这个脚本。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> /usr/libexec/PlistBuddy -c <span class="s2">&quot;Set :CFBundleVersion `git log | grep -P &#39;commit [\da-f]{40}&#39; | wc -l`&quot;</span> <span class="s2">&quot;${TARGET_BUILD_DIR}/${INFOPLIST_PATH}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单，数一下Git版本库的提交次数，使用PlistBuddy将其设置为CFBundleVersion。</p>

<p>顺便附上以前使用的SVN脚本，稍稍不同的是将版本号补齐到3位。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">rev</span><span class="o">=</span><span class="sb">`</span>svnversion -n<span class="sb">`</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="k">${#</span><span class="nv">rev</span><span class="k">}</span> -lt 3 <span class="o">]</span> ; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">rev</span><span class="o">=</span><span class="s2">&quot;0${rev}&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> -n <span class="s2">&quot;${TARGET_BUILD_DIR}/${INFOPLIST_PATH}&quot;</span> | xargs -0 /usr/libexec/PlistBuddy -c <span class="s2">&quot;Set :CFBundleVersion ${rev}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法：新建一个<code>Run Script</code>类型的<code>Build Phase</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现Mac应用的自我重启]]></title>
    <link href="http://linfan.info/blog/2012/03/26/mac-app-self-relaunch/"/>
    <updated>2012-03-26T19:31:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/26/mac-app-self-relaunch</id>
    <content type="html"><![CDATA[<p>对于应用程序的某些配置项，需要重新启动应用才能生效。比较友好的方式是提醒用户，并在用户确认后完成自我重启。</p>

<p>实现自我重启的方法很多，易于理解且实现简单的一种如下。</p>

<ol>
<li>启动一个子进程；</li>
<li>主进程退出；</li>
<li>子进程延时一定时间后拉起主进程，或者检测主进程已经关闭后重新拉起。</li>
</ol>


<!--more-->


<p>子进程可以是一个简单的命令行程序，不过最简易的方法莫过于使用Shell，以下是代码片段。</p>

<div><script src='https://gist.github.com/2204627.js?file='></script>
<noscript><pre><code>@implementation NSApplication (Relaunch)

- (void)relaunchAfterDelay:(float)seconds
{
    NSTask *task = [[[NSTask alloc] init] autorelease];
    NSMutableArray *args = [NSMutableArray array];
    [args addObject:@&quot;-c&quot;];
    [args addObject:[NSString stringWithFormat:@&quot;sleep %f; open \&quot;%@\&quot;&quot;, seconds, [[NSBundle mainBundle] bundlePath]]];
    [task setLaunchPath:@&quot;/bin/sh&quot;];
    [task setArguments:args];
    [task launch];
    
    [self terminate:nil];
}

@end</code></pre></noscript></div>


<p>以上代码只实现了延时重启，并未检测主进程状态。</p>

<p>使用方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">NSApp</span> <span class="nl">relaunchAfterDelay:</span><span class="mf">2.0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode的点滴记录]]></title>
    <link href="http://linfan.info/blog/2012/03/07/xcode-tips/"/>
    <updated>2012-03-07T09:58:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/07/xcode-tips</id>
    <content type="html"><![CDATA[<p>升级到Lion以及Xcode 4之后，发现Xcode 4在配置上与Xcode 3有些不同，记录于此备忘。</p>

<!--more-->


<h2>代码中的公司名称</h2>

<p>Xcode生成代码时，自动在文件头插入注释，其中的公司名称需要设置，否则以<code>__MyCompanyName__</code>代替。</p>

<p>Xcode 3中设置ORGANIZATIONNAME宏定义。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.Xcode PBXCustomTemplateMacroDefinitions <span class="s1">&#39;{ORGANIZATIONNAME=&quot;YourNameHere&quot;;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Xcode 4不再使用此宏定义，直接读取系统地址簿中的公司信息，所以需要在地址簿中给自己设定一个公司名称。</p>

<p>Xcode 3和Xcode 4都可以针对项目单独设置公司名称，其中Xcode 3的设置项是项目信息窗口中<code>General</code>选项卡的<code>Organization Name</code>，而Xcode 4是右边栏项目文件信息中<code>Project Document</code>分组下的<code>Organization</code>。</p>

<h2>让大括号另起一行</h2>

<p>使用Xcode自动完成功能生成的代码，左大括号是位于行末的。如果要让大括号另起一行，Xcode 3与Xcode 4的设置并不相同。</p>

<p>Xcode 3的设置：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.Xcode XCCodeSenseFormattingOptions -dict BlockSeparator <span class="s2">&quot;\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Xcode 4中，自动完成功能是由代码片段库<code>Code Snippet Library</code>控制的，因此需要修改相应的代码片段模板。点击代码片段，会弹出窗口显示其内容，并提供编辑功能。但是，Apple并不允许我们修改内建的代码模板。不过，我们可以绕过Xcode进行修改。Xcode 4内建的代码片段保存在/Developer/Library/Xcode/PrivatePlugIns/IDECodeSnippetLibrary.ideplugin/Contents/Resources/SystemCodeSnippets.codesnippets文件中，这是一个plist文件，直接编辑即可。<a href="https://gist.github.com/1992813">这里</a>是我修改好的文件。</p>

<p>补充：Xcode 4.3及之后版本，代码片段位于/Applications/Xcode.app/Contents/PlugIns/IDECodeSnippetLibrary.ideplugin/Contents/Resources/SystemCodeSnippets.codesnippets文件中。</p>

<h2>烦人的调试权限问题</h2>

<p>将Lion升级到10.7.3之后，每次在Xcode 4中运行程序都会弹出如下信息提示，输入用户密码才能继续。</p>

<pre><code>“Developer Tools Access”需控制另一进程，才能继续调试。键入您的密码以允许执行此操作。
</code></pre>

<p>以及</p>

<pre><code>“gdb-i386-apple-darwin”需控制另一进程，才能继续调试。键入您的密码以允许执行此操作。
</code></pre>

<p><a href="http://stackoverflow.com/questions/9132826/stop-developer-tools-access-needs-to-take-control-of-another-process-for-debugg">Stack Overflow</a>上给出了两种解决方案。</p>

<ul>
<li><p>重新安装Xcode</p></li>
<li><p>按如下方法修改/etc/authorization文件</p></li>
</ul>


<div><script src='https://gist.github.com/1992771.js?file='></script>
<noscript><pre><code>--- /etc/authorization.bak 2012-03-07 10:44:43.000000000 +0800
+++ /etc/authorization  2012-03-07 10:50:41.000000000 +0800
@@ -7568,7 +7568,7 @@
            &lt;key&gt;allow-root&lt;/key&gt;
            &lt;false/&gt;
            &lt;key&gt;class&lt;/key&gt;
-           &lt;string&gt;user&lt;/string&gt;
+           &lt;string&gt;rule&lt;/string&gt;
            &lt;key&gt;comment&lt;/key&gt;
            &lt;string&gt;For use by Apple.  WARNING: administrators are advised
             not to modify this right.&lt;/string&gt;
@@ -7698,12 +7698,16 @@
                &lt;key&gt;zh-Hant&lt;/key&gt;
                &lt;string&gt;“__APPNAME__”需要控制另一個程序才能繼續除錯。&lt;/string&gt;
            &lt;/dict&gt;
-           &lt;key&gt;group&lt;/key&gt;
-           &lt;string&gt;_developer&lt;/string&gt;
            &lt;key&gt;shared&lt;/key&gt;
            &lt;true/&gt;
-           &lt;key&gt;timeout&lt;/key&gt;
-           &lt;integer&gt;36000&lt;/integer&gt;
+           &lt;key&gt;k-of-n&lt;/key&gt;
+           &lt;integer&gt;1&lt;/integer&gt;
+           &lt;key&gt;rule&lt;/key&gt;
+           &lt;array&gt;
+               &lt;string&gt;is-admin&lt;/string&gt;
+               &lt;string&gt;is-developer&lt;/string&gt;
+               &lt;string&gt;authenticate-developer&lt;/string&gt;
+           &lt;/array&gt;
        &lt;/dict&gt;
        &lt;key&gt;system.privilege.taskport.safe&lt;/key&gt;
        &lt;dict&gt;</code></pre></noscript></div>


<p>没有验证第一种方法，第二种方法经验证有效（修改前切记备份原文件）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HP-UX中SFTP的一个小问题]]></title>
    <link href="http://linfan.info/blog/2012/03/05/hpux-sftp/"/>
    <updated>2012-03-05T22:44:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/05/hpux-sftp</id>
    <content type="html"><![CDATA[<p>最近工作的一个项目，使用<a href="http://www.libssh2.org">libssh2</a>在HP-UX环境下实现SFTP的文件传输。测试时发现一个问题，使用libssh2_sftp_rename重命名文件时，若目标文件已经存在，总是不能成功。使用libssh2_sftp_last_error得到的错误代码是LIBSSH2_FX_FAILURE(4)，基本没有参考价值；另外可排除用户权限因素。</p>

<!--more-->


<p>查阅libssh2的文档及include/libssh2_sftp.h文件，得知libssh2_sftp_rename实际是libssh2_sftp_rename_ex的宏定义，该宏传入的flags参数是LIBSSH2_SFTP_RENAME_OVERWRITE | LIBSSH2_SFTP_RENAME_ATOMIC | LIBSSH2_SFTP_RENAME_NATIVE，即包含了覆盖已存在文件的选项，可为什么还是失败呢？继续追查libssh2_sftp_rename_ex的实现，逐步跟踪到src/sftp.c文件中的sftp_rename函数，发现这段代码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">sftp</span><span class="o">-&gt;</span><span class="n">version</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">_libssh2_store_u32</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sftp</span><span class="o">-&gt;</span><span class="n">rename_s</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是flags参数唯一出现的地方，也就是说只有SFTP服务器协议版本不小于5时，重命名的那些选项才有效，HP-UX上出现的很有可能就是这种情况。为了证实，使用系统内建的sftp工具连接，输入version命令，得到以下输出。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sftp</span><span class="o">&gt;</span> <span class="n">version</span>
</span><span class='line'><span class="n">SFTP</span> <span class="n">protocol</span> <span class="n">version</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然，SFTP服务协议版本就是造成这个问题的原因，解决办法很简单，重命名文件之前调用libssh2_sftp_unlink删除目标文件即可。libssh2应该在文档中说明SFTP服务协议版本对相关函数的影响。</p>

<p>此问题在HP-UX B.11.31/IA-64和B.11.11/PA-RISC中都存在。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Wine在Mac OS X中运行Windows程序]]></title>
    <link href="http://linfan.info/blog/2012/03/01/wine-mac/"/>
    <updated>2012-03-01T00:06:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/01/wine-mac</id>
    <content type="html"><![CDATA[<p>目前，在Mac OS X中运行Windows程序，不外乎两种方法。一是在虚拟机软件如<a href="http://www.virtualbox.org">VirtualBox</a>、<a href="http://www.vmware.com/mac">VMware Fusion</a>、<a href="http://www.parallels.com/products/desktop/">Parallels Desktop</a>中安装完整的Windows操作系统；另一种则是利用<a href="http://www.winehq.org">Wine</a>或其商业版本<a href="http://www.codeweavers.com">Crossover Office</a>直接运行Windows软件。</p>

<p>Wine的名字是一个有意思的缩写，Wine Is Not an Emulator，如其所表，Wine并非虚拟机，它实现功能的方法是提供对Windows API的兼容，从而使Windows程序能够运行在Linux/Mac OS X操作系统中。与虚拟机相比，Wine的运行效率和系统资源占用都有很大优势，但兼容性会差一些，不过很多软件包括Office、Photoshop之类的大型软件都能运行。<a href="http://appdb.winehq.org">这里</a>有一个Wine的兼容性列表。</p>

<p>本文谈一下Wine在Mac OS X中的安装和配置。</p>

<!--more-->


<h2>Wine的安装</h2>

<p>通过<a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装Wine非常简单，输入以下命令即可。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install wine --devel
</span></code></pre></td></tr></table></div></figure>


<p>命令中的<code>--devel</code>参数表示安装开发版，否则默认安装稳定版。Wine的开发版本也足够稳定，不必担心，而其兼容性会高于稳定版。</p>

<p>安装完成后，在终端运行<code>winecfg</code>，可以调出Wine的配置面板，同时也会创建<code>~/.wine</code>目录。输入<code>wine program.exe</code>这样的命令就可以运行Windows程序了，比如<code>wine winemine.exe</code>可启动Wine自带的扫雷游戏。</p>

<h2>字体平滑</h2>

<p>Wine支持字体平滑，默认情况下未开启，下载这个注册表文件并使用<code>wine regedit wine_smoothfonts.reg</code>导入即可开启字体平滑。</p>

<div><script src='https://gist.github.com/1947925.js?file='></script>
<noscript><pre><code>REGEDIT4

[HKEY_CURRENT_USER\Control Panel\Desktop]
&quot;FontSmoothing&quot;=&quot;2&quot;
&quot;FontSmoothingType&quot;=dword:00000002
&quot;FontSmoothingGamma&quot;=dword:00000578
&quot;FontSmoothingOrientation&quot;=dword:00000001</code></pre></noscript></div>


<h2>中文字体替换</h2>

<p>使用Wine运行中文软件，发现汉字都显示成方块，这是因为Wine在使用默认的英文字体渲染汉字时，不会自动调用中文字体进行替换，我们可以在注册表中指明字体替换规则来解决。我选择了使用<a href="http://wenq.org/index.cgi?MicroHei">文泉驿微米黑</a>字体来替换，你可以根据自己的喜好进行修改，比如使用Mac OS X的冬青黑字体。</p>

<p>下载<a href="http://downloads.sourceforge.net/project/wqy/wqy-microhei/0.2.0-beta/wqy-microhei-0.2.0-beta.tar.gz">文泉驿微米黑</a>字体文件，解压其中的<code>wqy-microhei.ttc</code>文件到<code>~/.wine/drive_c/windows/Fonts</code>目录中，或者直接安装到Mac OS X系统中。然后下载下面的注册表文件，使用<code>wine regedit wine_fontsubstitutes_wqymicrohei.reg</code>导入。使用系统字体时，将文件中的<code>WenQuanYi Micro Hei</code>和<code>WenQuanYi Micro Hei Mono</code>替换成相应的系统字体名称，且不需要另外安装到<code>~/.wine</code>目录中，Wine会自动扫描系统字体。</p>

<div><script src='https://gist.github.com/1947935.js?file='></script>
<noscript><pre><code>REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]
&quot;Arial&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Comic Sans MS&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Courier&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Courier New&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Fixedsys&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Helv&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Helvetica&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Lucida Console&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Lucida Sans&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Microsoft Sans Serif&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MingLiU&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;PMingLiu&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;MS Shell Dlg&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Shell Dlg 2&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Dialog&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS PGothic&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;MS UI Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Mincho&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS PMincho&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;SimHei&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;SimSun&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;NSimSun&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;System&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Tahoma&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Times&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Times New Roman&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Tms Rmn&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Trebuchet MS&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Verdana&quot;=&quot;WenQuanYi Micro Hei&quot;</code></pre></noscript></div>


<p>此外，需要在<code>~/.bash_profile</code>中增加以下两行，否则文件名中的汉字还是乱码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LC_CTYPE</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span></code></pre></td></tr></table></div></figure>


<h2>输入法</h2>

<p>Wine的UI渲染是基于X11环境的，无法使用Mac OS X原生的输入法，需要另外安装基于X11的输入法。经过试验，Fcitx 3.5可以顺利安装。以下安装和配置步骤同样基于<a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew create http://www.fcitx.org/download/fcitx-3.5-070703.tar.bz2
</span></code></pre></td></tr></table></div></figure>


<p>下载完成后，Homebrew会自动打开创建的编译脚本进行编辑，在<code>system "make install"</code>之前增加一行<code>system "make"</code>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install fcitx
</span></code></pre></td></tr></table></div></figure>


<p>在<code>~/.bash_profile</code>中增加一行。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">XMODIFIERS</span><span class="o">=</span><span class="s2">&quot;@im=fcitx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装完成后，运行<code>fcitx</code>，之后按<code>⌃C</code>结束，这会让Fcitx创建它的配置文件。编辑<code>~/.fcitx/profile</code>，将<code>主窗口位置Y</code>的值修改为22以上，这样Fcitx的状态条就不会被菜单栏挡住了（菜单栏的高度是22）。新版XQuartz中，这个步骤不是必须，因为X服务器在计算坐标时已经考虑了菜单栏的存在。Fcitx的所有设置都可以在<code>~/.fcitx/profile</code>和<code>~/.fcitx/config</code>这两个文件中修改，请参考Fcitx的相关文档。</p>

<p>输入汉字时，必须先运行Fcitx，可以让Fcitx随X11自动启动。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write org.x.X11 app_to_run /usr/local/bin/fcitx
</span></code></pre></td></tr></table></div></figure>


<p>如果使用XQuartz而非系统预装的X11，输入以下命令设置。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write org.macosforge.xquartz.X11 app_to_run /usr/local/bin/fcitx
</span></code></pre></td></tr></table></div></figure>


<h2>程序菜单</h2>

<p>将常用的Windows程序放置到X11的<code>应用程序</code>菜单中，就不需要使用命令行操作了；也可以利用Automator把它们包装成Mac应用。推荐使用Automator，同时启动Fcitx和Windows应用，效果完美，参见如下截图。</p>

<p><img src="http://linfan.info/blog/images/2012-03-01-wine-mac_launchpad.jpg" alt="launchpad" /></p>

<p><img src="http://linfan.info/blog/images/2012-03-01-wine-mac_automator.png" alt="automator" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X下读写ext2/ext3文件系统]]></title>
    <link href="http://linfan.info/blog/2012/02/29/mac-ext2fs/"/>
    <updated>2012-02-29T09:24:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/29/mac-ext2fs</id>
    <content type="html"><![CDATA[<p>我的移动硬盘上，有个分区是ext2文件系统的，不能在Mac OS X中挂载。幸好，在开源世界里，我们总是能找到各种问题的解决方法，感谢无私的开发者。</p>

<p><a href="http://fuse-ext2.sourceforge.net">fuse-ext2</a>是ext2文件系统在<a href="http://fuse.sourceforge.net">FUSE</a>上的实现，支持Linux和Mac OS X。FUSE是在操作系统用户态下实现的文件系统，源自Linux，Mac OS X的移植版本主要有三个，<a href="http://code.google.com/p/macfuse/">MacFUSE</a>、<a href="http://fuse4x.org">Fuse4X</a>和<a href="http://osxfuse.github.com">OSXFUSE</a>，其中，MacFUSE已经停止开发，后二者是MacFUSE的继承者。Fuse4X和OSXFUSE都把对FUSE最新API的支持作为项目目标，但Fuse4X不提供对MacFUSE旧版本接口的兼容，OSXFUSE则同时兼容MacFUSE旧接口。fuse-ext2二进制安装包是基于MacFUSE编译的，所以我们选择OSXFUSE，获取最佳的功能与兼容性。</p>

<!--more-->


<p>分别下载<a href="https://github.com/osxfuse/osxfuse/downloads">OSXFUSE</a>和<a href="http://sourceforge.net/projects/fuse-ext2/files/">fuse-ext2</a>的.dmg二进制包并安装。<strong>注意：安装OSXFUSE时，一定要勾选<code>MacFUSE Compatibility Layer</code></strong>。安装完成后重启，就可以自动挂载ext2/ext3文件系统了。当然，也可以使用mount命令挂载，<code>mount -t fuse-ext2 &lt;device&gt; &lt;mountpoint&gt;</code>。</p>

<p>默认情况下，fuse-ext2进行只读挂载，可以修改<code>/System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util</code>文件进行读写挂载。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vi /System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util
</span></code></pre></td></tr></table></div></figure>


<p>修改Mount函数（第200行前后），为OPTIONS变量增加<code>rw+</code>标志。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>Mount <span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    LogDebug <span class="s2">&quot;[Mount] Entering function Mount...&quot;</span>
</span><span class='line'>    <span class="c"># Setting both defer_auth and defer_permissions. The option was renamed</span>
</span><span class='line'>    <span class="c"># starting with MacFUSE 1.0.0, and there seems to be no backward</span>
</span><span class='line'>    <span class="c"># compatibility on the options.</span>
</span><span class='line'>    <span class="nv">OPTIONS</span><span class="o">=</span><span class="s2">&quot;auto_xattr,defer_permissions,rw+&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># The local option is only enabled on Leopard. It causes strange</span>
</span><span class='line'>    ...
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Finder中对ext2/ext3文件系统进行写操作，时常出现<code>error code -36</code>错误，但在终端中使用命令行则没有任何问题，可能是FUSE和Mac OS X的兼容性导致。</p>

<p>虽然名为fuse-ext2，实际也支持ext3的读写，只是不支持ext3文件系统的日志。</p>

<p>OSXFUSE和fuse-ext2都可以在系统偏好设置中卸载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa菜单栏右侧图标的实现]]></title>
    <link href="http://linfan.info/blog/2012/02/28/cocoa-icon-on-right-side-of-menu-bar/"/>
    <updated>2012-02-28T21:35:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/28/cocoa-icon-on-right-side-of-menu-bar</id>
    <content type="html"><![CDATA[<p>与Windows中的Tray Icon不同，Mac OS X中类似的UI元素位于屏幕右上角菜单栏的右侧，官方命名为Status Item，我们可以使用NSStatusBar和NSStatusItem类在菜单栏上为自己的应用添加图标。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSStatusBar</span> <span class="o">*</span><span class="n">statusBar</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSStatusBar</span> <span class="n">systemStatusBar</span><span class="p">];</span>
</span><span class='line'><span class="n">NSStatusItem</span> <span class="o">*</span><span class="n">statusItem</span> <span class="o">=</span> <span class="p">[</span><span class="n">statusBar</span> <span class="nl">statusItemWithLength:</span><span class="n">NSVariableStatusItemLength</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setImage:</span><span class="n">image</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setMenu:</span><span class="n">menu</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setHighlightMode:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="n">retain</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用这种方法创建的图标，位于菜单栏图标区域的最左侧，如果菜单栏上图标太多，很容易就被程序菜单遮挡了。那么，有没有办法在菜单栏的右侧添加图标呢？</p>

<!--more-->


<p>根据Apple的开发文档，这是不可能实现的。不过，Apple留了后门，通过调用NSStatusBar类的一些非公开API，是可以将图标移动到菜单栏右侧的。我们来看看怎么做。</p>

<p>首先要声明将要调用的非公开API。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">NSStatusBar</span> <span class="nl">(NSStatusBar_Private)</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">_statusItemWithLength:</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">l</span> <span class="nl">withPriority:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">_insertStatusItem:</span><span class="p">(</span><span class="n">NSStatusItem</span> <span class="o">*</span><span class="p">)</span><span class="n">i</span> <span class="nl">withPriority:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>与NSStatusBar的常规接口相比，最关键的是新增的withPriority参数，这个参数指明了图标的优先级，实际上就是图标在菜单栏上的位置。</p>

<p>那么，怎么使用这两个API呢？根据我从茫茫网络收集的资料，有不完全相同的两种方法，各有优劣。</p>

<p><strong>方法一</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">statusBar</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">_statusItemWithLength:withPriority:</span><span class="p">)]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">statusBar</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">_insertStatusItem:withPriority:</span><span class="p">)])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">priority</span> <span class="o">=</span> <span class="n">INT_MAX</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statusItem</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">statusItem</span> <span class="o">=</span> <span class="p">[</span><span class="n">statusBar</span> <span class="nl">_statusItemWithLength:</span><span class="mi">0</span> <span class="nl">withPriority:</span><span class="n">priority</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">statusItem</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">statusBar</span> <span class="nl">removeStatusItem:</span><span class="n">statusItem</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">statusBar</span> <span class="nl">_insertStatusItem:</span><span class="n">statusItem</span> <span class="nl">withPriority:</span><span class="n">priority</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">statusItem</span> <span class="nl">setLength:</span><span class="n">NSVariableStatusItemLength</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>方法二</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">restartSystemUIServer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSTask</span> <span class="o">*</span><span class="n">killSystemUITask</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSTask</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">args</span> <span class="nl">addObject:</span><span class="s">@&quot;SystemUIServer&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">args</span> <span class="nl">addObject:</span><span class="s">@&quot;-HUP&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">killSystemUITask</span> <span class="nl">setLaunchPath:</span><span class="s">@&quot;/usr/bin/killall&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">killSystemUITask</span> <span class="nl">setArguments:</span><span class="n">args</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">killSystemUITask</span> <span class="n">launch</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">createStatusBar</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">statusBar</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">_statusItemWithLength:withPriority:</span><span class="p">)])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statusItem</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">statusItem</span> <span class="o">=</span> <span class="p">[</span><span class="n">statusBar</span> <span class="nl">_statusItemWithLength:</span><span class="mi">0</span> <span class="nl">withPriority:</span><span class="n">INT_MAX</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">statusItem</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">statusItem</span> <span class="nl">setLength:</span><span class="n">NSVariableStatusItemLength</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">restartSystemUIServer</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法一不需要重新启动SystemUIServer服务，但是在Lion的全屏模式下，右侧一部分会被Spotlight的图标所遮挡；方法二没有此问题，但重启SystemUIServer服务的过程会删除菜单栏上所有图标并重建，视觉效果不好。</p>

<p>另外，方法一在Snow Leopard下运行时，如果用户输入<code>killall SystemUIServer</code>重启SystemUIServer服务，会导致图标错位到Spotlight图标的右侧。解决方法是捕获系统的“com.apple.menuextra.added”通知（这个通知也是非公开的），调用方法一重新添加图标。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">NSDistributedNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>                                                    <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">menuExtrasWereAddedHandler:</span><span class="p">)</span>
</span><span class='line'>                                                        <span class="nl">name:</span><span class="s">@&quot;com.apple.menuextra.added&quot;</span>
</span><span class='line'>                                                      <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>两种方法都在Snow Leopard和Lion操作系统中通过测试。</p>

<p>另，Mac OS X系统内建的各种图标并非由上述方法创建，而使用了另一个非公开的类NSMenuExtra，可以按住⌘键拖动调整位置。</p>

<p>方法一来自<a href="http://code.google.com/p/tunnelblick/">Tunnelblick</a>项目，方法二来自<a href="http://shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock">Day-O</a>作者Shaun Inman的指导，特此感谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X下使用bindfs实现mount的目录绑定功能]]></title>
    <link href="http://linfan.info/blog/2012/02/28/bindfs-on-mac/"/>
    <updated>2012-02-28T00:02:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/28/bindfs-on-mac</id>
    <content type="html"><![CDATA[<p>Linux下的mount命令有一个<code>--bind</code>参数，将目录挂载到另一个目录下。Mac OS X的mount命令不支持<code>--bind</code>，不过我们可以使用<a href="http://code.google.com/p/bindfs/">bindfs</a>实现相同的功能。</p>

<p>bindfs是一个基于<a href="http://fuse.sourceforge.net/">FUSE</a>的文件系统实现，并非Mac OS X的预装工具，但通过<a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装非常简单。</p>

<!--more-->


<p><code>brew install bindfs</code></p>

<p>Homebrew会自动安装bindfs以及其依赖的gettext和fuse4x。如果出现未找到pkg-config的错误，请先输入<code>brew install pkg-config</code>安装。</p>

<p>安装完成后，需要在系统启动时加载FUSE内核扩展。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp -rfX /usr/local/Cellar/fuse4x-kext/0.8.14/Library/Extensions/fuse4x.kext /System/Library/Extensions
</span><span class='line'>sudo chmod +s /System/Library/Extensions/fuse4x.kext/Support/load_fuse4x
</span></code></pre></td></tr></table></div></figure>


<p>重启生效。</p>

<p>bindfs的使用也非常简单，跟<code>mount --bind</code>基本一样。</p>

<p><code>bindfs 源目录 挂载点</code></p>

<p>更多信息可以在终端里输入<code>man bindfs</code>查阅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Mac OS X的终端多姿多彩]]></title>
    <link href="http://linfan.info/blog/2012/02/27/colorful-terminal-in-mac/"/>
    <updated>2012-02-27T13:57:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/27/colorful-terminal-in-mac</id>
    <content type="html"><![CDATA[<p>与Linux相比，Mac OS X的终端总是欠缺些什么。对了，是色彩，Linux的ls命令使用不同颜色区分各种文件类型，Vim编辑器也支持语法高亮，而Mac终端却总是以黑白示人。其实，只要稍微做一些工作，Mac的终端同样可以多姿多彩，请往下看。</p>

<!--more-->


<h2>彩色化ls的输出</h2>

<p>Mac中BSD的ls命令可以使用<code>-G</code>参数彩色化输出的文件列表，需要配置LSCOLORS环境变量定义颜色，具体配置方法可以输入<code>man ls</code>查看。</p>

<p>不过，我推荐安装Linux使用的GNU Coreutils替换Mac的ls命令，因为：</p>

<ul>
<li>Coreutils提供了配置工具，定义颜色代码更加方便；</li>
<li>Coreutils包含的不仅仅是ls，同时作为Linux用户，我更习惯于使用GNU的各种shell工具。</li>
</ul>


<p>Coreutils的安装与配置方法如下：</p>

<ol>
<li><p>通过<a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装Coreutils<br/>
<code>brew install xz coreutils</code><br/>
注：Coreutils并不依赖于xz，但它的源码是用xz格式压缩的，安装xz才能解压。</p></li>
<li><p>生成颜色定义文件<br/>
<code>gdircolors --print-database &gt; ~/.dir_colors</code></p></li>
<li><p>在<code>~/.bash_profile</code>配置文件中加入以下代码</p></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span>brew list | grep coreutils &gt; /dev/null ; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$(brew --prefix coreutils)/libexec/gnubin:$PATH&quot;</span>
</span><span class='line'>  <span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls -F --show-control-chars --color=auto&#39;</span>
</span><span class='line'>  <span class="nb">eval</span> <span class="sb">`</span>gdircolors -b <span class="nv">$HOME</span>/.dir_colors<span class="sb">`</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>gdircolor的作用就是设置ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS），我们可以修改~/.dir_colors自定义文件的颜色，此文件中的注释已经包含各种颜色取值的说明。</p>

<p>看看默认颜色的显示效果。<br/>
<img src="http://linfan.info/blog/images/2012-02-27-colorful-terminal-in-mac_ls.png" alt="ls screenshot" /></p>

<h2>grep高亮显示关键字</h2>

<p>这个很简单，加上<code>--color</code>参数就可以了，为了使用方便，可以在<code>~/.bash_profile</code>配置文件中加上alias定义。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">grep</span><span class="o">=</span><span class="s1">&#39;grep --color&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">egrep</span><span class="o">=</span><span class="s1">&#39;egrep --color&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">fgrep</span><span class="o">=</span><span class="s1">&#39;fgrep --color&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Vim语法高亮</h2>

<p>在Vim中输入命令<code>:syntax on</code>激活语法高亮，若需要Vim启动时自动激活，在<code>~/.vimrc</code>中添加一行<code>syntax on</code>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew的安装与使用]]></title>
    <link href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/"/>
    <updated>2012-02-25T19:50:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage</id>
    <content type="html"><![CDATA[<p>Mac OS X是基于Unix的操作系统，可以安装大部分为Unix/Linux开发的软件。然而，如果只是以使用为目的，对每个软件都进行手工编译不是很方便，也不利于管理已安装的软件，于是出现了类似于Linux中APT、Yum等类似的软件包管理系统，其中最著名的有MacPorts、Fink、Homebrew等。</p>

<p>我曾经是MacPorts的使用者，但了解Homebrew之后，立即“弃暗投明”了。其实MacPorts也是一个很不错的解决方案，除了一个实在让我头疼的特性。MacPorts有个原则，对于软件包之间的依赖，都在MacPorts内部解决（/opt/local），无论系统本身是否包含了需要的库，都不会加以利用。这使得MacPorts过分的庞大臃肿，导致系统出现大量软件包的冗余，占用不小的磁盘空间，同时稍大型一点的软件编译时间都会难以忍受。</p>

<!--more-->


<p>而Homebrew的原则恰恰相反，它尽可能地利用系统自带的各种库，使得软件包的编译时间大为缩短；同时由于几乎不会造成冗余，软件包的管理也清晰、灵活了许多。Homebrew的另一个特点是使用Ruby定义软件包安装配置（叫做formula），定制非常简单。</p>

<p>至于Fink，由于并未安装使用过，不加讨论。（从互联网上的消息看，Fink由于维护人手的问题，软件包的更新不是很及时。）于我而言，Homebrew已经足够完善，除非发现重大的问题或者出现新的具有突破性的竞争对手，否则我没兴趣折腾别的软件包管理系统了。</p>

<p>下面说说Homebrew的安装与使用。</p>

<h2>Homebrew的安装</h2>

<p>首先确保你的系统满足如下要求：</p>

<ol>
<li>基于Intel CPU</li>
<li>操作系统为Mac OS X 10.5 Leopard或更高版本</li>
<li>已安装版本管理工具Git（Mac OS X 10.7 Lion已经预安装）</li>
<li>已安装Xcode开发工具<sup>1</sup></li>
<li>已安装Java Developer Update<sup>2</sup></li>
</ol>


<p>注1：Xcode 4.3中，命令行编译工具是可选安装，需要在<code>Preferences</code> > <code>Downloads</code>中激活。<br/>
注2：可选，Homebrew本身不依赖于Java，只有部分软件包的安装需要Java支持。</p>

<p>Homebrew的安装非常简单，在终端程序中输入以下命令即可。</p>

<p><code>/usr/bin/ruby -e "$(/usr/bin/curl -fksSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"</code></p>

<p>安装过程需要输入root口令。</p>

<h2>Homebrew的使用</h2>

<p>Homebrew的可执行命令是brew，其基本使用方法如下（以wget为例）。</p>

<p>查找软件包<br/>
<code>brew search wget</code></p>

<p>安装软件包<br/>
<code>brew install wget</code></p>

<p>列出已安装的软件包<br/>
<code>brew list</code></p>

<p>删除软件包<br/>
<code>brew remove wget</code></p>

<p>查看软件包信息<br/>
<code>brew info wget</code></p>

<p>列出软件包的依赖关系<br/>
<code>brew deps wget</code></p>

<p>更新brew<br/>
<code>brew update</code></p>

<p>列出过时的软件包（已安装但不是最新版本）<br/>
<code>brew outdated</code></p>

<p>更新过时的软件包（全部或指定）<br/>
<code>brew upgrade</code> 或 <code>brew upgrade wget</code></p>

<h2>定制自己的软件包</h2>

<p>如果自己需要的软件包并不能在Homebrew中找到，怎么办呢，毕竟Homebrew是一个新生项目，不可能满足所有人的需求。当然，我们可以自行编译安装，但手工安装的软件包游离于Homebrew之外，管理起来不是很方便。</p>

<p>前文说过，Homebrew使用Ruby实现的软件包配置非常方便，下面简单谈一谈软件包的定制（假定软件包名称是bar，来自foo站点）。</p>

<ol>
<li><p>首先找到待安装软件的源码下载地址<br/>
<code>http://foo.com/bar-1.0.tgz</code></p></li>
<li><p>建立自己的formula<br/>
<code>brew create http://foo.com/bar-1.0.tgz</code></p></li>
<li><p>编辑formula，上一步建立成功后，Homebrew会自动打开新建的formula进行编辑，也可用如下命令打开formula进行编辑。<br/>
<code>brew edit bar</code><br/>
Homebrew自动建立的formula已经包含了基本的<code>configure</code>和<code>make install</code>命令，对于大部分软件，不需要进行修改，退出编辑即可。</p></li>
<li><p>输入以下命令安装自定义的软件包<br/>
<code>brew install bar</code></p></li>
</ol>


<h2></h2>

<p>关于Homebrew的其它功能，比如将自定义软件包提交到官方发布等，请参考Homebrew项目的<a href="http://mxcl.github.com/homebrew/">主页</a>及其Man Page。你将发现Homebrew不仅是“家酿”，更是“佳酿”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打造完美的Drupal编辑器]]></title>
    <link href="http://linfan.info/blog/2012/02/23/perfect-drupal-editor/"/>
    <updated>2012-02-23T10:06:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/23/perfect-drupal-editor</id>
    <content type="html"><![CDATA[<p>一个Octopress架设的博客，怎么上来就是一篇Drupal的文章呢？很简单，本来是打算用Drupal来架设个人博客的，结果在上线前发现了Octopress，于是叛逃了 :) 。尽管不再使用Drupal，但安装Drupal过程中的一些经验还是值得记录与分享的。</p>

<p>言归正传，Drupal预设的编辑器过于简陋，而我当时对“完美”的定义是：可视化、图像上传、代码高亮，并且使用 <a href="http://ckeditor.com/">CKEditor</a> + <a href="http://drupal.org/project/imce">IMCE</a> + <a href="http://alexgorbatchev.com/">SyntaxHighlighter</a> 实现了预期目标。以下是安装过程，基于Drupal 7环境。</p>

<!--more-->


<h2>安装CKEditor</h2>

<p>CKEditor是最好的在线HTML编辑器之一，也是将要实现的Drupal编辑器的核心组成部分。</p>

<p>下载<a href="http://download.cksource.com/CKEditor%20for%20Drupal/CKEditor%203.6.2%20for%20Drupal/ckeditor_3.6.2_for_drupal_7.zip">CKEditor 3.6 for Drupal 7</a>并在Drupal模块管理界面中安装（也可直接通过URL安装）。启用CKEditor，此时Drupal已经有了一个不错的所见即所得编辑器。</p>

<h2>安装IMCE</h2>

<p>IMCE是一个文件管理器，用于实现图像文件的上传。其实，CKEditor本身就捆绑了一个非常好的文件管理器CKFinder，但CKFinder是收费软件（CKEditor是免费/收费双重授权的，我们使用其免费授权），故使用免费的IMCE进行替换，本文也不讨论CKFinder的配置。</p>

<p>下载<a href="http://ftp.drupal.org/files/projects/imce-7.x-1.5.tar.gz">IMCE</a>，安装并启用。</p>

<p>进入CKEditor的配置页面，编辑<code>Advanced</code>配置档案，展开<code>FILE BROWSER SETTINGS</code>，可以看到<code>File browser type</code>设置为<code>CKFinder</code>，将其修改为<code>IMCE</code>。按同样方法修改<code>Full</code>配置档案。</p>

<h2>代码高亮</h2>

<p>到目前为止，Drupal编辑器已经基本成型了，可以应付绝大部分的编辑需要。不过作为<del> 酷毙 </del>苦逼的码农，怎么能缺少代码高亮功能呢。</p>

<p>代码高亮可以通过SyntaxHighlighter实现，并且只支持<code>Full HTML</code>文本格式。相对于CKEditor和IMCE，这个东东的安装会复杂一些，慢慢道来。</p>

<p>1. 下载<a href="http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current">SyntaxHighlighter</a>，解压到<code>sites/all/libraries</code>目录下（新安装的Drupal是没有这个目录的，需要手工创建）。为什么不在模块管理界面中安装呢，因为这只是一个Javascript库，不是Drupal模块。</p>

<p>2. 下载<a href="http://ftp.drupal.org/files/projects/syntaxhighlighter-7.x-2.x-dev.tar.gz">SyntaxHighlighter的Drupal模块</a>，安装并启用。</p>

<p>3. 进入<code>SyntaxHighlighter</code>的配置页面，勾选需要支持的语言，保存设置。<strong>注意：不要修改代码使用的标签名称，因为之后安装的某个插件只识别默认的&lt;pre>标签</strong>。</p>

<p>4. 进入<code>文本格式</code>的配置页面，编辑<code>Full HTML</code>格式，在<code>启用过滤器</code>分组中勾选<code>Syntax highlighter</code>，并在<code>过滤器处理顺序</code>中将其置为第一个；取消选择<code>将换行符号转换为HTML</code>，否则代码换行处会插入&lt;br>标签。保存设置。</p>

<p>OK，现在新建一篇文章，选择格式为<code>Full HTML</code>，点击CKEditor工具栏左上的<code>Source</code>按钮切换到源文件模式，输入以下内容，预览一下，是不是已经可以显示代码高亮了？</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">&quot;brush:cpp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>    printf(&quot;Hello, World!\n&quot;);
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'><span class="nt">&lt;/code&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>让CKEditor支持代码高亮</h2>

<p>这样显然不够，虽然实现了代码高亮显示，但怎样才能在CKEditor中直接输入代码呢？我们需要安装一个叫做<a href="http://code.google.com/p/ckeditor-syntaxhighlight/">ckeditor-syntaxhighlight</a>的插件。</p>

<p>1. 下载<a href="http://ckeditor-syntaxhighlight.googlecode.com/files/ckeditor-syntaxhighlight-1.0.tar.bz2">ckeditor-syntaxhighlight</a>，将其中的<code>ckeditor-syntaxhighlight/plugins/syntaxhighlight</code>解压到<code>sites/all/modules/ckeditor/ckeditor/plugins</code>目录下。</p>

<p>2. 编辑<code>sites/all/modules/ckeditor/includes/ckeditor.lib.inc</code>文件，在<code>ckeditor_load_plugins</code>函数的<code>CKEditor build-in plugins</code>段中加入以下代码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">file_exists</span><span class="p">(</span><span class="err">$</span><span class="n">_editor_path</span> <span class="o">.</span> <span class="s">&#39;plugins/syntaxhighlight/plugin.js&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">$</span><span class="n">arr</span><span class="p">[</span><span class="s">&#39;syntaxhighlight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>        <span class="s">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;syntaxhighlight&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;desc&#39;</span> <span class="o">=&gt;</span> <span class="n">t</span><span class="p">(</span><span class="s">&#39;Syntaxhighlight plugin&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="err">$</span><span class="n">base_path</span> <span class="o">.</span> <span class="err">$</span><span class="n">editor_path</span> <span class="o">.</span> <span class="s">&#39;plugins/syntaxhighlight/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;default&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;f&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3. 编辑<code>sites/all/modules/ckeditor/ckeditor.config.js</code>文件，在<code>Drupal.settings.cke_toolbar_DrupalFull</code>数组的最后加入<code>'Code'</code>，即数组内容的最后一行修改为<code>['DrupalBreak', 'DrupalPageBreak', 'Code']</code>，保存。</p>

<p>4. 进入CKEditor的配置页面，编辑<code>Full</code>配置档案，展开<code>EDITOR APPEARANCE</code>，在<code>Plugins</code>分组中勾选<code>Syntaxhighlight plugin</code>，保存设置。</p>

<p>好了，新建一篇<code>Full HTML</code>格式的文章，看看CKEditor工具栏上最后一排是不是新增了一个<code>code</code>按钮，点击一下看看。如果看不到新增的按钮，在CKEditor的<code>Full</code>配置中，展开<code>EDITOR APPEARANCE</code>，在<code>工具栏</code>分组中，重新<code>Load sample toolbar: Full</code>，保存设置。</p>

<p>大功告成！</p>

<h2>题外话</h2>

<p>如果你是一名程序员，不排斥控制台操作方式，并且只想简简单单地写一写博客，强烈推荐<a href="http://octopress.org">Octopress</a>，个中好处请自行<a href="http://www.google.com/search?q=Octopress">Google</a>之。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Octopress!]]></title>
    <link href="http://linfan.info/blog/2012/02/22/hello-octopress/"/>
    <updated>2012-02-22T10:15:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/22/hello-octopress</id>
    <content type="html"><![CDATA[

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;hello octopress&quot;</span><span class="o">]</span>
</span><span class='line'>vi <span class="nb">source</span>/_post/2012-02-22-hello-octopress.markdown
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
