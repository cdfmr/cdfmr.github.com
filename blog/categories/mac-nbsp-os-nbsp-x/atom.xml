<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac&nbsp;OS&nbsp;X | linfan's blog]]></title>
  <link href="http://linfan.info/blog/categories/mac-nbsp-os-nbsp-x/atom.xml" rel="self"/>
  <link href="http://linfan.info/"/>
  <updated>2012-05-07T20:42:24+08:00</updated>
  <id>http://linfan.info/</id>
  <author>
    <name><![CDATA[linfan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[各种OS中生成UUID的方法]]></title>
    <link href="http://linfan.info/blog/2012/04/20/uuid/"/>
    <updated>2012-04-20T20:50:00+08:00</updated>
    <id>http://linfan.info/blog/2012/04/20/uuid</id>
    <content type="html"><![CDATA[<p>开发人员或多或少都应该知道UUID或GUID，这是摘自<a href="http://zh.wikipedia.org/zh-cn/UUID">维基百科</a>的一段描述。</p>

<p><code>通用唯一识别码 (Universally Unique Identifier, UUID) 是一个软件建构的标准，亦为自由软件基金会 (Open Software Foundation, OSF) 的组织在分散式计算环境 (Distributed Computing Environment, DCE) 领域的一部份。</code></p>

<p><code>UUID 的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的 UUID。在这样的情况下，就不需考虑数据库建立时的名称重复问题。目前最广泛应用的 UUID，即是微软的 Microsoft's Globally Unique Identifiers (GUIDs)，而其他重要的应用，则有 Linux ext2/ext3 档案系统、LUKS 加密分割区、GNOME、KDE、Mac OS X 等等。另外我们也可以在 e2fsprogs 套件中的 UUID 函式库找到实作。</code></p>

<!--more-->


<p>因参与的一个项目需要在不同系统及开发环境中生成UUID，故对UUID的生成进行了一些学习，整理如下。</p>

<h2>Shell</h2>

<p>几乎所有Unix和类Unix环境中都包含了一个名为<code>uuidgen</code>的小工具，运行即可生成一个UUID。</p>

<h2>Linux/Mac OS X</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">uuid</span><span class="o">/</span><span class="n">uuid</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span><span class='line'><span class="n">uuid_generate</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">uuid</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">uuid_t</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02x&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在Linux下编译时需要链接uuid库（-luuid），在Mac OS X下则不需要。</p>

<h2>HP-UX</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">dce</span><span class="o">/</span><span class="n">uuid</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span><span class='line'><span class="n">unsigned32</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">uuid_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">ret</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="n">uuid_s_ok</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">uuid</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">uuid_t</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02x&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>虽然都命名为uuid_t，但HP-UX与Linux的uuid_t的定义形式不同，前者是由long/short/char等组成的structure，后者则是单纯的char数组（两者本质上等价，只是表示形式不同），所以uuid_create与uuid_generate参数中的uuid_t形式也不同。</p>

<p>注意，uuid.h头文件位于/opt/dce/include目录下，且需要链接dcekt库（-ldcekt）。</p>

<h2>Mac OS X (Cocoa)</h2>

<p>进行Cocoa开发时，使用CFUUIDCreate函数可生成UUID，以下代码摘自<a href="http://vgable.com/blog/2008/02/24/creating-a-uuid-guid-in-cocoa/">Vincent Gable’s Blog</a>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">+</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">stringWithUUID</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CFUUIDRef</span> <span class="n">uuidObj</span> <span class="o">=</span> <span class="n">CFUUIDCreate</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span><span class="c1">//create a new UUID</span>
</span><span class='line'><span class="c1">//get the string representation of the UUID</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">uuidString</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">CFUUIDCreateString</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="n">uuidObj</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">uuidObj</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">uuidString</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Windows</h2>

<p>使用API函数<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms688568%28v=vs.85%29.aspx"><code>HRESULT CoCreateGuid(__out GUID *pguid)</code></a>可生成GUID（即UUID），其中GUID类型的定义类似于HP-UX，将上文HP-UX的示范代码稍作修改即可移植到Windows平台。由于CoCreateGuid是COM函数，别忘了首先调用<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms695279%28v=vs.85%29.aspx"><code>CoInitializeEx</code></a>进行初始化。</p>

<h2>Java</h2>

<p>JDK 1.5以上内建了UUID的支持，使用非常简单。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;...&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode: 使用Git自动设置项目版本]]></title>
    <link href="http://linfan.info/blog/2012/03/27/xcode-build-number-with-git/"/>
    <updated>2012-03-27T15:13:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/27/xcode-build-number-with-git</id>
    <content type="html"><![CDATA[<p>本来一直使用SVN进行版本管理，并习惯于将代码版本（revision）作为Xcode项目的编译号（CFBundleVersion）。最近开始了解Git，被其种种美好所诱惑，于是一股脑将个人的所有项目都转移到Git，然后发现CFBundleVersion不好设置了。</p>

<!--more-->


<p>与SVN不同，Git使用散列值作为每次提交的标记，而不是像SVN那样使用递增序列，因此不便直接用作CFBundleVersion。正愁以后每次都要麻烦地手工设置了，苦思冥想一番之后豁然开朗，虽然Git没有数值化的版本号，但我可以自己数一数提交次数啊，于是有了这个脚本。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/libexec/PlistBuddy -c <span class="s2">&quot;Set :CFBundleVersion &lt;code&gt;git log | grep -P &#39;commit [\da-f]{40}&#39; | wc -l&lt;/code&gt;&quot;</span> <span class="k">${</span><span class="nv">TARGET_BUILD_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">INFOPLIST_PATH</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>很简单，数一下Git版本库的提交次数，使用PlistBuddy将其设置为CFBundleVersion。</p>

<p>顺便附上以前使用的SVN脚本，稍稍不同的是将版本号补齐到3位。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">rev</span><span class="o">=</span>&lt;code&gt;svnversion -n&lt;/code&gt;
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="k">${#</span><span class="nv">rev</span><span class="k">}</span> -lt 3 <span class="o">]</span> ; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;rev<span class="o">=</span><span class="s2">&quot;0${rev}&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done
</span><span class='line'><span class="nb">echo</span> -n <span class="k">${</span><span class="nv">TARGET_BUILD_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">INFOPLIST_PATH</span><span class="k">}</span> | xargs -0 /usr/libexec/PlistBuddy -c <span class="s2">&quot;Set :CFBundleVersion ${rev}&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用方法：新建一个<code>Run Script</code>类型的<code>Build Phase</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现Mac应用的自我重启]]></title>
    <link href="http://linfan.info/blog/2012/03/26/mac-app-self-relaunch/"/>
    <updated>2012-03-26T19:31:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/26/mac-app-self-relaunch</id>
    <content type="html"><![CDATA[<p>对于应用程序的某些配置项，需要重新启动应用才能生效。比较友好的方式是提醒用户，并在用户确认后完成自我重启。</p>

<p>实现自我重启的方法很多，易于理解且实现简单的一种如下。</p>

<ol>
<li>启动一个子进程；</li>
<li>主进程退出；</li>
<li>子进程延时一定时间后拉起主进程，或者检测主进程已经关闭后重新拉起。</li>
</ol>


<!--more-->


<p>子进程可以是一个简单的命令行程序，不过最简易的方法莫过于使用Shell，以下是代码片段。</p>

<p><div><script src='https://gist.github.com/2204627.js?file='></script>
<noscript><pre><code>@implementation NSApplication (Relaunch)

- (void)relaunchAfterDelay:(float)seconds
{
	NSTask *task = [[[NSTask alloc] init] autorelease];
	NSMutableArray *args = [NSMutableArray array];
	[args addObject:@&quot;-c&quot;];
	[args addObject:[NSString stringWithFormat:@&quot;sleep %f; open \&quot;%@\&quot;&quot;, seconds, [[NSBundle mainBundle] bundlePath]]];
	[task setLaunchPath:@&quot;/bin/sh&quot;];
	[task setArguments:args];
	[task launch];
	
	[self terminate:nil];
}

@end</code></pre></noscript></div>
</p>

<p>以上代码只实现了延时重启，并未检测主进程状态。</p>

<p>使用方法：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">NSApp</span> <span class="nl">relaunchAfterDelay:</span><span class="mf">2.0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode的点滴记录]]></title>
    <link href="http://linfan.info/blog/2012/03/07/xcode-tips/"/>
    <updated>2012-03-07T09:58:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/07/xcode-tips</id>
    <content type="html"><![CDATA[<p>升级到Lion以及Xcode 4之后，发现Xcode 4在配置上与Xcode 3有些不同，记录于此备忘。</p>

<!--more-->


<h2>代码中的公司名称</h2>

<p>Xcode生成代码时，自动在文件头插入注释，其中的公司名称需要设置，否则以<code>__MyCompanyName__</code>代替。</p>

<p>Xcode 3中设置ORGANIZATIONNAME宏定义。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.Xcode PBXCustomTemplateMacroDefinitions <span class="s1">&#39;{ORGANIZATIONNAME=&quot;YourNameHere&quot;;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Xcode 4不再使用此宏定义，直接读取系统地址簿中的公司信息，所以需要在地址簿中给自己设定一个公司名称。</p>

<p>Xcode 3和Xcode 4都可以针对项目单独设置公司名称，其中Xcode 3的设置项是项目信息窗口中<code>General</code>选项卡的<code>Organization Name</code>，而Xcode 4是右边栏项目文件信息中<code>Project Document</code>分组下的<code>Organization</code>。</p>

<h2>让大括号另起一行</h2>

<p>使用Xcode自动完成功能生成的代码，左大括号是位于行末的。如果要让大括号另起一行，Xcode 3与Xcode 4的设置并不相同。</p>

<p>Xcode 3的设置：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.Xcode XCCodeSenseFormattingOptions -dict BlockSeparator <span class="s2">&quot;\n&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Xcode 4中，自动完成功能是由代码片段库<code>Code Snippet Library</code>控制的，因此需要修改相应的代码片段模板。点击代码片段，会弹出窗口显示其内容，并提供编辑功能。但是，Apple并不允许我们修改内建的代码模板。不过，我们可以绕过Xcode进行修改。Xcode 4内建的代码片段保存在/Developer/Library/Xcode/PrivatePlugIns/IDECodeSnippetLibrary.ideplugin/Contents/Resources/SystemCodeSnippets.codesnippets文件中，这是一个plist文件，直接编辑即可。<a href="https://gist.github.com/1992813">这里</a>是我修改好的文件。</p>

<h2>烦人的调试权限问题</h2>

<p>将Lion升级到10.7.3之后，每次在Xcode 4中运行程序都会弹出如下信息提示，输入用户密码才能继续。</p>

<pre><code>“Developer Tools Access”需控制另一进程，才能继续调试。键入您的密码以允许执行此操作。
</code></pre>

<p>以及</p>

<pre><code>“gdb-i386-apple-darwin”需控制另一进程，才能继续调试。键入您的密码以允许执行此操作。
</code></pre>

<p><a href="http://stackoverflow.com/questions/9132826/stop-developer-tools-access-needs-to-take-control-of-another-process-for-debugg">Stack Overflow</a>上给出了两种解决方案。</p>

<ul>
<li><p>重新安装Xcode</p></li>
<li><p>按如下方法修改/etc/authorization文件</p></li>
</ul>


<p><div><script src='https://gist.github.com/1992771.js?file='></script>
<noscript><pre><code>--- /etc/authorization.bak	2012-03-07 10:44:43.000000000 +0800
+++ /etc/authorization	2012-03-07 10:50:41.000000000 +0800
@@ -7568,7 +7568,7 @@
 			&lt;key&gt;allow-root&lt;/key&gt;
 			&lt;false/&gt;
 			&lt;key&gt;class&lt;/key&gt;
-			&lt;string&gt;user&lt;/string&gt;
+			&lt;string&gt;rule&lt;/string&gt;
 			&lt;key&gt;comment&lt;/key&gt;
 			&lt;string&gt;For use by Apple.  WARNING: administrators are advised
             not to modify this right.&lt;/string&gt;
@@ -7698,12 +7698,16 @@
 				&lt;key&gt;zh-Hant&lt;/key&gt;
 				&lt;string&gt;“__APPNAME__”需要控制另一個程序才能繼續除錯。&lt;/string&gt;
 			&lt;/dict&gt;
-			&lt;key&gt;group&lt;/key&gt;
-			&lt;string&gt;_developer&lt;/string&gt;
 			&lt;key&gt;shared&lt;/key&gt;
 			&lt;true/&gt;
-			&lt;key&gt;timeout&lt;/key&gt;
-			&lt;integer&gt;36000&lt;/integer&gt;
+			&lt;key&gt;k-of-n&lt;/key&gt;
+			&lt;integer&gt;1&lt;/integer&gt;
+			&lt;key&gt;rule&lt;/key&gt;
+			&lt;array&gt;
+				&lt;string&gt;is-admin&lt;/string&gt;
+				&lt;string&gt;is-developer&lt;/string&gt;
+				&lt;string&gt;authenticate-developer&lt;/string&gt;
+			&lt;/array&gt;
 		&lt;/dict&gt;
 		&lt;key&gt;system.privilege.taskport.safe&lt;/key&gt;
 		&lt;dict&gt;</code></pre></noscript></div>
</p>

<p>没有验证第一种方法，第二种方法经验证有效（修改前切记备份原文件）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Wine在Mac OS X中运行Windows程序]]></title>
    <link href="http://linfan.info/blog/2012/03/01/wine-mac/"/>
    <updated>2012-03-01T00:06:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/01/wine-mac</id>
    <content type="html"><![CDATA[<p>目前，在Mac OS X中运行Windows程序，不外乎两种方法。一是在虚拟机软件如<a href="http://www.virtualbox.org">VirtualBox</a>、<a href="http://www.vmware.com/mac">VMware Fusion</a>、<a href="http://www.parallels.com/products/desktop/">Parallels Desktop</a>中安装完整的Windows操作系统；另一种则是利用<a href="http://www.winehq.org">Wine</a>或其商业版本<a href="http://www.codeweavers.com">Crossover Office</a>直接运行Windows软件。</p>

<p>Wine的名字是一个有意思的缩写，Wine Is Not an Emulator，如其所表，Wine并非虚拟机，它实现功能的方法是提供对Windows API的兼容，从而使Windows程序能够运行在Linux/Mac OS X操作系统中。与虚拟机相比，Wine的运行效率和系统资源占用都有很大优势，但兼容性会差一些，不过很多软件包括Office、Photoshop之类的大型软件都能运行。<a href="http://appdb.winehq.org">这里</a>有一个Wine的兼容性列表。</p>

<p>本文谈一下Wine在Mac OS X中的安装和配置。</p>

<!--more-->


<h2>Wine的安装</h2>

<p>通过<a href="/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装Wine非常简单，输入以下命令即可。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install wine --devel
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>命令中的<code>--devel</code>参数表示安装开发版，否则默认安装稳定版。Wine的开发版本也足够稳定，不必担心，而其兼容性会高于稳定版。</p>

<p>安装完成后，在终端运行<code>winecfg</code>，可以调出Wine的配置面板，同时也会创建<code>~/.wine</code>目录。输入<code>wine program.exe</code>这样的命令就可以运行Windows程序了，比如<code>wine winemine.exe</code>可启动Wine自带的扫雷游戏。</p>

<h2>字体平滑</h2>

<p>Wine支持字体平滑，默认情况下未开启，下载这个注册表文件并使用<code>wine regedit wine_smoothfonts.reg</code>导入即可开启字体平滑。</p>

<p><div><script src='https://gist.github.com/1947925.js?file='></script>
<noscript><pre><code>REGEDIT4

[HKEY_CURRENT_USER\Control Panel\Desktop]
&quot;FontSmoothing&quot;=&quot;2&quot;
&quot;FontSmoothingType&quot;=dword:00000002
&quot;FontSmoothingGamma&quot;=dword:00000578
&quot;FontSmoothingOrientation&quot;=dword:00000001</code></pre></noscript></div>
</p>

<h2>中文字体替换</h2>

<p>使用Wine运行中文软件，发现汉字都显示成方块，这是因为Wine在使用默认的英文字体渲染汉字时，不会自动调用中文字体进行替换，我们可以在注册表中指明字体替换规则来解决。我选择了使用<a href="http://wenq.org/index.cgi?MicroHei">文泉驿微米黑</a>字体来替换，你可以根据自己的喜好进行修改，比如使用Mac OS X的冬青黑字体。</p>

<p>下载<a href="http://downloads.sourceforge.net/project/wqy/wqy-microhei/0.2.0-beta/wqy-microhei-0.2.0-beta.tar.gz">文泉驿微米黑</a>字体文件，解压其中的<code>wqy-microhei.ttc</code>文件到<code>~/.wine/drive_c/windows/Fonts</code>目录中，或者直接安装到Mac OS X系统中。然后下载下面的注册表文件，使用<code>wine regedit wine_fontsubstitutes_wqymicrohei.reg</code>导入。使用系统字体时，将文件中的<code>WenQuanYi Micro Hei</code>和<code>WenQuanYi Micro Hei Mono</code>替换成相应的系统字体名称，且不需要另外安装到<code>~/.wine</code>目录中，Wine会自动扫描系统字体。</p>

<p><div><script src='https://gist.github.com/1947935.js?file='></script>
<noscript><pre><code>REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]
&quot;Arial&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Comic Sans MS&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Courier&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Courier New&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Fixedsys&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Helv&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Helvetica&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Lucida Console&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Lucida Sans&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Microsoft Sans Serif&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MingLiU&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;PMingLiu&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;MS Shell Dlg&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Shell Dlg 2&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Dialog&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS PGothic&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;MS UI Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Mincho&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS PMincho&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;SimHei&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;SimSun&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;NSimSun&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;System&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Tahoma&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Times&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Times New Roman&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Tms Rmn&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Trebuchet MS&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Verdana&quot;=&quot;WenQuanYi Micro Hei&quot;</code></pre></noscript></div>
</p>

<p>此外，需要在<code>~/.bash_profile</code>中增加以下两行，否则文件名中的汉字还是乱码。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LC_CTYPE</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>输入法</h2>

<p>Wine的UI渲染是基于X11环境的，无法使用Mac OS X原生的输入法，需要另外安装基于X11的输入法。经过试验，Fcitx 3.5可以顺利安装。以下安装和配置步骤同样基于<a href="/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew create http://www.fcitx.org/download/fcitx-3.5-070703.tar.bz2
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>下载完成后，Homebrew会自动打开创建的编译脚本进行编辑，在<code>system "make install"</code>之前增加一行<code>system "make"</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install fcitx
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在<code>~/.bash_profile</code>中增加一行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">XMODIFIERS</span><span class="o">=</span><span class="s2">&quot;@im=fcitx&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>安装完成后，运行<code>fcitx</code>，之后按<code>⌃C</code>结束，这会让Fcitx创建它的配置文件。编辑<code>~/.fcitx/profile</code>，将<code>主窗口位置Y</code>的值修改为22以上，这样Fcitx的状态条就不会被菜单栏挡住了（菜单栏的高度是22）。新版XQuartz中，这个步骤不是必须，因为X服务器在计算坐标时已经考虑了菜单栏的存在。Fcitx的所有设置都可以在<code>~/.fcitx/profile</code>和<code>~/.fcitx/config</code>这两个文件中修改，请参考Fcitx的相关文档。</p>

<p>输入汉字时，必须先运行Fcitx，可以让Fcitx随X11自动启动。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write org.x.X11 app_to_run /usr/local/bin/fcitx
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果使用XQuartz而非系统预装的X11，输入以下命令设置。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write org.macosforge.xquartz.X11 app_to_run /usr/local/bin/fcitx
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>程序菜单</h2>

<p>将常用的Windows程序放置到X11的<code>应用程序</code>菜单中，就不需要使用命令行操作了；也可以利用Automator把它们包装成Mac应用。推荐使用Automator，同时启动Fcitx和Windows应用，效果完美，参见如下截图。</p>

<p><img src="/blog/images/2012-03-01-wine-mac_launchpad.jpg" alt="launchpad" /></p>

<p><img src="/blog/images/2012-03-01-wine-mac_automator.png" alt="automator" /></p>
]]></content>
  </entry>
  
</feed>
