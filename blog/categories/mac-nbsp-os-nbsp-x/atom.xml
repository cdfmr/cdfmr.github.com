<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac&nbsp;OS&nbsp;X | linfan's blog]]></title>
  <link href="http://linfan.info/blog/categories/mac-nbsp-os-nbsp-x/atom.xml" rel="self"/>
  <link href="http://linfan.info/"/>
  <updated>2012-03-07T21:06:47+08:00</updated>
  <id>http://linfan.info/</id>
  <author>
    <name><![CDATA[linfan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode的点滴记录]]></title>
    <link href="http://linfan.info/blog/2012/03/07/xcode-tips/"/>
    <updated>2012-03-07T09:58:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/07/xcode-tips</id>
    <content type="html"><![CDATA[<p>升级到Lion以及Xcode 4之后，发现Xcode 4在配置上与Xcode 3有些不同，记录于此备忘。</p>

<!--more-->


<h2>代码中的公司名称</h2>

<p>Xcode生成代码时，自动在文件头插入注释，其中的公司名称需要设置，否则以<code>__MyCompanyName__</code>代替。</p>

<p>Xcode 3中设置ORGANIZATIONNAME宏定义。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.Xcode PBXCustomTemplateMacroDefinitions <span class="s1">&#39;{ORGANIZATIONNAME=&quot;YourNameHere&quot;;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Xcode 4不再使用此宏定义，直接读取系统地址簿中的公司信息，所以需要在地址簿中给自己设定一个公司名称。</p>

<p>Xcode 3和Xcode 4都可以针对项目单独设置公司名称，其中Xcode 3的设置项是项目信息窗口中<code>General</code>选项卡的<code>Organization Name</code>，而Xcode 4是右边栏项目文件信息中<code>Project Document</code>分组下的<code>Organization</code>。</p>

<h2>让大括号另起一行</h2>

<p>使用Xcode自动完成功能生成的代码，左大括号是位于行末的。如果要让大括号另起一行，Xcode 3与Xcode 4的设置并不相同。</p>

<p>Xcode 3的设置：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.Xcode XCCodeSenseFormattingOptions -dict BlockSeparator <span class="s2">&quot;\n&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Xcode 4中，自动完成功能是由代码片段库<code>Code Snippet Library</code>控制的，因此需要修改相应的代码片段模板。点击代码片段，会弹出窗口显示其内容，并提供编辑功能。但是，Apple并不允许我们修改内建的代码模板。不过，我们可以绕过Xcode进行修改。Xcode 4内建的代码片段保存在/Developer/Library/Xcode/PrivatePlugIns/IDECodeSnippetLibrary.ideplugin/Contents/Resources/SystemCodeSnippets.codesnippets文件中，这是一个plist文件，直接编辑即可。<a href="https://gist.github.com/1992813">这里</a>是我修改好的文件。</p>

<h2>烦人的调试权限问题</h2>

<p>将Lion升级到10.7.3之后，每次在Xcode 4中运行程序都会弹出如下信息提示，输入用户密码才能继续。</p>

<pre><code>“Developer Tools Access”需控制另一进程，才能继续调试。键入您的密码以允许执行此操作。
</code></pre>

<p>以及</p>

<pre><code>“gdb-i386-apple-darwin”需控制另一进程，才能继续调试。键入您的密码以允许执行此操作。
</code></pre>

<p><a href="http://stackoverflow.com/questions/9132826/stop-developer-tools-access-needs-to-take-control-of-another-process-for-debugg">Stack Overflow</a>上给出了两种解决方案。</p>

<ul>
<li><p>重新安装Xcode</p></li>
<li><p>按如下方法修改/etc/authorization文件</p></li>
</ul>


<p><div><script src='https://gist.github.com/1992771.js?file='></script>
<noscript><pre><code>--- /etc/authorization.bak	2012-03-07 10:44:43.000000000 +0800
+++ /etc/authorization	2012-03-07 10:50:41.000000000 +0800
@@ -7568,7 +7568,7 @@
 			&lt;key&gt;allow-root&lt;/key&gt;
 			&lt;false/&gt;
 			&lt;key&gt;class&lt;/key&gt;
-			&lt;string&gt;user&lt;/string&gt;
+			&lt;string&gt;rule&lt;/string&gt;
 			&lt;key&gt;comment&lt;/key&gt;
 			&lt;string&gt;For use by Apple.  WARNING: administrators are advised
             not to modify this right.&lt;/string&gt;
@@ -7698,12 +7698,16 @@
 				&lt;key&gt;zh-Hant&lt;/key&gt;
 				&lt;string&gt;“__APPNAME__”需要控制另一個程序才能繼續除錯。&lt;/string&gt;
 			&lt;/dict&gt;
-			&lt;key&gt;group&lt;/key&gt;
-			&lt;string&gt;_developer&lt;/string&gt;
 			&lt;key&gt;shared&lt;/key&gt;
 			&lt;true/&gt;
-			&lt;key&gt;timeout&lt;/key&gt;
-			&lt;integer&gt;36000&lt;/integer&gt;
+			&lt;key&gt;k-of-n&lt;/key&gt;
+			&lt;integer&gt;1&lt;/integer&gt;
+			&lt;key&gt;rule&lt;/key&gt;
+			&lt;array&gt;
+				&lt;string&gt;is-admin&lt;/string&gt;
+				&lt;string&gt;is-developer&lt;/string&gt;
+				&lt;string&gt;authenticate-developer&lt;/string&gt;
+			&lt;/array&gt;
 		&lt;/dict&gt;
 		&lt;key&gt;system.privilege.taskport.safe&lt;/key&gt;
 		&lt;dict&gt;</code></pre></noscript></div>
</p>

<p>没有验证第一种方法，第二种方法经验证有效（修改前切记备份原文件）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Wine在Mac OS X中运行Windows程序]]></title>
    <link href="http://linfan.info/blog/2012/03/01/wine-mac/"/>
    <updated>2012-03-01T00:06:00+08:00</updated>
    <id>http://linfan.info/blog/2012/03/01/wine-mac</id>
    <content type="html"><![CDATA[<p>目前，在Mac OS X中运行Windows程序，不外乎两种方法。一是在虚拟机软件如<a href="http://www.virtualbox.org">VirtualBox</a>、<a href="http://www.vmware.com/mac">VMware Fusion</a>、<a href="http://www.parallels.com/products/desktop/">Parallels Desktop</a>中安装完整的Windows操作系统；另一种则是利用<a href="http://www.winehq.org">Wine</a>或其商业版本<a href="http://www.codeweavers.com">Crossover Office</a>直接运行Windows软件。</p>

<p>Wine的名字是一个有意思的缩写，Wine Is Not an Emulator，如其所表，Wine并非虚拟机，它实现功能的方法是提供对Windows API的兼容，从而使Windows程序能够运行在Linux/Mac OS X操作系统中。与虚拟机相比，Wine的运行效率和系统资源占用都有很大优势，但兼容性会差一些，不过很多软件包括Office、Photoshop之类的大型软件都能运行。<a href="http://appdb.winehq.org">这里</a>有一个Wine的兼容性列表。</p>

<p>本文谈一下Wine在Mac OS X中的安装和配置。</p>

<!--more-->


<h2>Wine的安装</h2>

<p>通过<a href="/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装Wine非常简单，输入以下命令即可。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install wine --devel
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>命令中的<code>--devel</code>参数表示安装开发版，否则默认安装稳定版。Wine的开发版本也足够稳定，不必担心，而其兼容性会高于稳定版。</p>

<p>安装完成后，在终端运行<code>winecfg</code>，可以调出Wine的配置面板，同时也会创建<code>~/.wine</code>目录。输入<code>wine program.exe</code>这样的命令就可以运行Windows程序了，比如<code>wine winemine.exe</code>可启动Wine自带的扫雷游戏。</p>

<h2>字体平滑</h2>

<p>Wine支持字体平滑，默认情况下未开启，下载这个注册表文件并使用<code>wine regedit wine_smoothfonts.reg</code>导入即可开启字体平滑。</p>

<p><div><script src='https://gist.github.com/1947925.js?file='></script>
<noscript><pre><code>REGEDIT4

[HKEY_CURRENT_USER\Control Panel\Desktop]
&quot;FontSmoothing&quot;=&quot;2&quot;
&quot;FontSmoothingType&quot;=dword:00000002
&quot;FontSmoothingGamma&quot;=dword:00000578
&quot;FontSmoothingOrientation&quot;=dword:00000001</code></pre></noscript></div>
</p>

<h2>中文字体替换</h2>

<p>使用Wine运行中文软件，发现汉字都显示成方块，这是因为Wine在使用默认的英文字体渲染汉字时，不会自动调用中文字体进行替换，我们可以在注册表中指明字体替换规则来解决。我选择了使用<a href="http://wenq.org/index.cgi?MicroHei">文泉驿微米黑</a>字体来替换，你可以根据自己的喜好进行修改，比如使用Mac OS X的冬青黑字体。</p>

<p>下载<a href="http://downloads.sourceforge.net/project/wqy/wqy-microhei/0.2.0-beta/wqy-microhei-0.2.0-beta.tar.gz">文泉驿微米黑</a>字体文件，解压其中的<code>wqy-microhei.ttc</code>文件到<code>~/.wine/drive_c/windows/Fonts</code>目录中，或者直接安装到Mac OS X系统中。然后下载下面的注册表文件，使用<code>wine regedit wine_fontsubstitutes_wqymicrohei.reg</code>导入。使用系统字体时，将文件中的<code>WenQuanYi Micro Hei</code>和<code>WenQuanYi Micro Hei Mono</code>替换成相应的系统字体名称，且不需要另外安装到<code>~/.wine</code>目录中，Wine会自动扫描系统字体。</p>

<p><div><script src='https://gist.github.com/1947935.js?file='></script>
<noscript><pre><code>REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]
&quot;Arial&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Comic Sans MS&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Courier&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Courier New&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Fixedsys&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Helv&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Helvetica&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Lucida Console&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;Lucida Sans&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Microsoft Sans Serif&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MingLiU&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;PMingLiu&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;MS Shell Dlg&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Shell Dlg 2&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Dialog&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS PGothic&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;MS UI Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS Mincho&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;MS PMincho&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;SimHei&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;SimSun&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;NSimSun&quot;=&quot;WenQuanYi Micro Hei Mono&quot;
&quot;System&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Tahoma&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Times&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Times New Roman&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Tms Rmn&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Trebuchet MS&quot;=&quot;WenQuanYi Micro Hei&quot;
&quot;Verdana&quot;=&quot;WenQuanYi Micro Hei&quot;</code></pre></noscript></div>
</p>

<p>此外，需要在<code>~/.bash_profile</code>中增加以下两行，否则文件名中的汉字还是乱码。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LC_CTYPE</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>输入法</h2>

<p>Wine的UI渲染是基于X11环境的，无法使用Mac OS X原生的输入法，需要另外安装基于X11的输入法。经过试验，Fcitx 3.5可以顺利安装。以下安装和配置步骤同样基于<a href="/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew create http://www.fcitx.org/download/fcitx-3.5-070703.tar.bz2
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>下载完成后，Homebrew会自动打开创建的编译脚本进行编辑，在<code>system "make install"</code>之前增加一行<code>system "make"</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install fcitx
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在<code>~/.bash_profile</code>中增加一行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">XMODIFIERS</span><span class="o">=</span><span class="s2">&quot;@im=fcitx&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>安装完成后，运行<code>fcitx</code>，之后按<code>⌃C</code>结束，这会让Fcitx创建它的配置文件。编辑<code>~/.fcitx/profile</code>，将<code>主窗口位置Y</code>的值修改为22以上，这样Fcitx的状态条就不会被菜单栏挡住了（菜单栏的高度是22）。新版XQuartz中，这个步骤不是必须，因为X服务器在计算坐标时已经考虑了菜单栏的存在。Fcitx的所有设置都可以在<code>~/.fcitx/profile</code>和<code>~/.fcitx/config</code>这两个文件中修改，请参考Fcitx的相关文档。</p>

<p>输入汉字时，必须先运行Fcitx，可以让Fcitx随X11自动启动。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write org.x.X11 app_to_run /usr/local/bin/fcitx
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果使用XQuartz而非系统预装的X11，输入以下命令设置。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write org.macosforge.xquartz.X11 app_to_run /usr/local/bin/fcitx
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>程序菜单</h2>

<p>将常用的Windows程序放置到X11的<code>应用程序</code>菜单中，就不需要使用命令行操作了；也可以利用Automator把它们包装成Mac应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X下读写ext2/ext3文件系统]]></title>
    <link href="http://linfan.info/blog/2012/02/29/mac-ext2fs/"/>
    <updated>2012-02-29T09:24:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/29/mac-ext2fs</id>
    <content type="html"><![CDATA[<p>我的移动硬盘上，有个分区是ext2文件系统的，不能在Mac OS X中挂载。幸好，在开源世界里，我们总是能找到各种问题的解决方法，感谢无私的开发者。</p>

<p><a href="http://fuse-ext2.sourceforge.net">fuse-ext2</a>是ext2文件系统在<a href="http://fuse.sourceforge.net">FUSE</a>上的实现，支持Linux和Mac OS X。FUSE是在操作系统用户态下实现的文件系统，源自Linux，Mac OS X的移植版本主要有三个，<a href="http://code.google.com/p/macfuse/">MacFUSE</a>、<a href="http://fuse4x.org">Fuse4X</a>和<a href="http://osxfuse.github.com">OSXFUSE</a>，其中，MacFUSE已经停止开发，后二者是MacFUSE的继承者。Fuse4X和OSXFUSE都把对FUSE最新API的支持作为项目目标，但Fuse4X不提供对MacFUSE旧版本接口的兼容，OSXFUSE则同时兼容MacFUSE旧接口。fuse-ext2二进制安装包是基于MacFUSE编译的，所以我们选择OSXFUSE，获取最佳的功能与兼容性。</p>

<!--more-->


<p>分别下载<a href="https://github.com/osxfuse/osxfuse/downloads">OSXFUSE</a>和<a href="http://sourceforge.net/projects/fuse-ext2/files/">fuse-ext2</a>的.dmg二进制包并安装。<strong>注意：安装OSXFUSE时，一定要勾选<code>MacFUSE Compatibility Layer</code></strong>。安装完成后重启，就可以自动挂载ext2/ext3文件系统了。当然，也可以使用mount命令挂载，<code>mount -t fuse-ext2 &lt;device&gt; &lt;mountpoint&gt;</code>。</p>

<p>默认情况下，fuse-ext2进行只读挂载，可以修改<code>/System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util</code>文件进行读写挂载。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vi /System/Library/Filesystems/fuse-ext2.fs/fuse-ext2.util
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>修改Mount函数（第200行前后），为OPTIONS变量增加<code>rw+</code>标志。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>Mount <span class="o">()</span>
</span><span class='line'><span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;LogDebug <span class="s2">&quot;[Mount] Entering function Mount...&quot;</span>
</span><span class='line'><span class="c"># Setting both defer_auth and defer_permissions. The option was renamed</span>
</span><span class='line'><span class="c"># starting with MacFUSE 1.0.0, and there seems to be no backward</span>
</span><span class='line'><span class="c"># compatibility on the options.</span>
</span><span class='line'><span class="nv">OPTIONS</span><span class="o">=</span><span class="s2">&quot;auto_xattr,defer_permissions,rw+&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The local option is only enabled on Leopard. It causes strange</span>
</span><span class='line'>...
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在Finder中对ext2/ext3文件系统进行写操作，时常出现<code>error code -36</code>错误，但在终端中使用命令行则没有任何问题，可能是FUSE和Mac OS X的兼容性导致。</p>

<p>虽然名为fuse-ext2，实际也支持ext3的读写，只是不支持ext3文件系统的日志。</p>

<p>OSXFUSE和fuse-ext2都可以在系统偏好设置中卸载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa菜单栏右侧图标的实现]]></title>
    <link href="http://linfan.info/blog/2012/02/28/cocoa-icon-on-right-side-of-menu-bar/"/>
    <updated>2012-02-28T21:35:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/28/cocoa-icon-on-right-side-of-menu-bar</id>
    <content type="html"><![CDATA[<p>与Windows中的Tray Icon不同，Mac OS X中类似的UI元素位于屏幕右上角菜单栏的右侧，官方命名为Status Item，我们可以使用NSStatusBar和NSStatusItem类在菜单栏上为自己的应用添加图标。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSStatusBar</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">statusBar</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSStatusBar</span> <span class="n">systemStatusBar</span><span class="p">];</span>
</span><span class='line'><span class="n">NSStatusItem</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">statusItem</span> <span class="o">=</span> <span class="p">[</span><span class="n">statusBar</span> <span class="nl">statusItemWithLength:</span><span class="n">NSVariableStatusItemLength</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setImage:</span><span class="n">image</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setMenu:</span><span class="n">menu</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setHighlightMode:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="n">retain</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用这种方法创建的图标，位于菜单栏图标区域的最左侧，如果菜单栏上图标太多，很容易就被程序菜单遮挡了。那么，有没有办法在菜单栏的右侧添加图标呢？</p>

<!--more-->


<p>根据Apple的开发文档，这是不可能实现的。不过，Apple留了后门，通过调用NSStatusBar类的一些非公开API，是可以将图标移动到菜单栏右侧的。我们来看看怎么做。</p>

<p>首先要声明将要调用的非公开API。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">NSStatusBar</span> <span class="nl">(NSStatusBar_Private)</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="nl">statusItemWithLength:</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">l</span> <span class="nl">withPriority:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="nl">insertStatusItem:</span><span class="p">(</span><span class="n">NSStatusItem</span> <span class="o">*</span><span class="p">)</span><span class="n">i</span> <span class="nl">withPriority:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>与NSStatusBar的常规接口相比，最关键的是新增的withPriority参数，这个参数指明了图标的优先级，实际上就是图标在菜单栏上的位置。</p>

<p>那么，怎么使用这两个API呢？根据我从茫茫网络收集的资料，有不完全相同的两种方法，各有优劣。</p>

<p><strong>方法一</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">statusBar</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">_statusItemWithLength:withPriority:</span><span class="p">)]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">statusBar</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">_insertStatusItem:withPriority:</span><span class="p">)])</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">priority</span> <span class="o">=</span> <span class="n">INT_MAX</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statusItem</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">statusItem</span> <span class="o">=</span> <span class="p">[</span><span class="n">statusBar</span> <span class="nl">_statusItemWithLength:</span><span class="mi">0</span> <span class="nl">withPriority:</span><span class="n">priority</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">statusItem</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="n">statusBar</span> <span class="nl">removeStatusItem:</span><span class="n">statusItem</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusBar</span> <span class="nl">_insertStatusItem:</span><span class="n">statusItem</span> <span class="nl">withPriority:</span><span class="n">priority</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">statusItem</span> <span class="nl">setLength:</span><span class="n">NSVariableStatusItemLength</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>方法二</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">restartSystemUIServer</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSTask</span> <span class="o">*</span><span class="n">killSystemUITask</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSTask</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">args</span> <span class="nl">addObject:</span><span class="s">@&quot;SystemUIServer&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">args</span> <span class="nl">addObject:</span><span class="s">@&quot;-HUP&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">killSystemUITask</span> <span class="nl">setLaunchPath:</span><span class="s">@&quot;/usr/bin/killall&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">killSystemUITask</span> <span class="nl">setArguments:</span><span class="n">args</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">killSystemUITask</span> <span class="n">launch</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">createStatusBar</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">statusBar</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">_statusItemWithLength:withPriority:</span><span class="p">)])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statusItem</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">statusItem</span> <span class="o">=</span> <span class="p">[</span><span class="n">statusBar</span> <span class="nl">_statusItemWithLength:</span><span class="mi">0</span> <span class="nl">withPriority:</span><span class="n">INT_MAX</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">statusItem</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="n">statusItem</span> <span class="nl">setLength:</span><span class="n">NSVariableStatusItemLength</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">restartSystemUIServer</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p>方法一不需要重新启动SystemUIServer服务，但是在Lion的全屏模式下，右侧一部分会被Spotlight的图标所遮挡；方法二没有此问题，但重启SystemUIServer服务的过程会删除菜单栏上所有图标并重建，视觉效果不好。</p>

<p>另外，方法一在Snow Leopard下运行时，如果用户输入<code>killall SystemUIServer</code>重启SystemUIServer服务，会导致图标错位到Spotlight图标的右侧。解决方法是捕获系统的“com.apple.menuextra.added”通知（这个通知也是非公开的），调用方法一重新添加图标。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">NSDistributedNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                                                <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">menuExtrasWereAddedHandler:</span><span class="p">)</span>
</span><span class='line'>                                                    <span class="nl">name:</span><span class="s">@&quot;com.apple.menuextra.added&quot;</span>
</span><span class='line'>                                                  <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>两种方法都在Snow Leopard和Lion操作系统中通过测试。</p>

<p>另，Mac OS X系统内建的各种图标并非由上述方法创建，而使用了另一个非公开的类NSMenuExtra，可以按住⌘键拖动调整位置。</p>

<p>方法一来自<a href="http://code.google.com/p/tunnelblick/">Tunnelblick</a>项目，方法二来自<a href="http://shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock">Day-O</a>作者Shaun Inman的指导，特此感谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X下使用bindfs实现mount的目录绑定功能]]></title>
    <link href="http://linfan.info/blog/2012/02/28/bindfs-on-mac/"/>
    <updated>2012-02-28T00:02:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/28/bindfs-on-mac</id>
    <content type="html"><![CDATA[<p>Linux下的mount命令有一个<code>--bind</code>参数，将目录挂载到另一个目录下。Mac OS X的mount命令不支持<code>--bind</code>，不过我们可以使用<a href="http://code.google.com/p/bindfs/">bindfs</a>实现相同的功能。</p>

<p>bindfs是一个基于<a href="http://fuse.sourceforge.net/">FUSE</a>的文件系统实现，并非Mac OS X的预装工具，但通过<a href="/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装非常简单。</p>

<!--more-->


<p><code>brew install bindfs</code></p>

<p>Homebrew会自动安装bindfs以及其依赖的gettext和fuse4x。如果出现未找到pkg-config的错误，请先输入<code>brew install pkg-config</code>安装。</p>

<p>安装完成后，需要在系统启动时加载FUSE内核扩展。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp -rfX /usr/local/Cellar/fuse4x-kext/0.8.14/Library/Extensions/fuse4x.kext /System/Library/Extensions
</span><span class='line'>sudo chmod +s /System/Library/Extensions/fuse4x.kext/Support/load_fuse4x
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>重启生效。</p>

<p>bindfs的使用也非常简单，跟<code>mount --bind</code>基本一样。</p>

<p><code>bindfs 源目录 挂载点</code></p>

<p>更多信息可以在终端里输入<code>man bindfs</code>查阅。</p>
]]></content>
  </entry>
  
</feed>
