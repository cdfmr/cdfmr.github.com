<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac&nbsp;OS&nbsp;X | linfan's blog]]></title>
  <link href="http://linfan.info/blog/categories/mac-nbsp-os-nbsp-x/atom.xml" rel="self"/>
  <link href="http://linfan.info/"/>
  <updated>2012-02-28T00:09:06+08:00</updated>
  <id>http://linfan.info/</id>
  <author>
    <name><![CDATA[linfan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac OS X下使用bindfs实现mount的目录绑定功能]]></title>
    <link href="http://linfan.info/blog/2012/02/28/bindfs-on-mac/"/>
    <updated>2012-02-28T00:02:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/28/bindfs-on-mac</id>
    <content type="html"><![CDATA[<p>Linux下的mount命令有一个<code>--bind</code>参数，将目录挂载到另一个目录下。Mac OS X的mount命令不支持<code>--bind</code>，不过我们可以使用<a href="code.google.com/p/bindfs/">bindfs</a>实现相同的功能。</p>

<p>bindfs是一个基于<a href="http://fuse.sourceforge.net/">FUSE</a>的文件系统实现，并非Mac OS X的预装工具，但通过<a href="../../../../2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装非常简单。</p>

<!--more-->


<p><code>brew install bindfs</code></p>

<p>Homebrew会自动安装bindfs以及其依赖的gettext和fuse4x。如果出现未找到pkg-config的错误，请先输入<code>brew install pkg-config</code>安装。</p>

<p>安装完成后，需要在系统启动时加载FUSE内核扩展。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp -rfX /usr/local/Cellar/fuse4x-kext/0.8.14/Library/Extensions/fuse4x.kext /System/Library/Extensions
</span><span class='line'>sudo chmod +s /System/Library/Extensions/fuse4x.kext/Support/load_fuse4x
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>重启生效。</p>

<p>bindfs的使用也非常简单，跟<code>mount --bind</code>基本一样。</p>

<p><code>bindfs 源目录 挂载点</code></p>

<p>更多信息可以在终端里输入<code>man bindfs</code>查阅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Mac OS X的终端多姿多彩]]></title>
    <link href="http://linfan.info/blog/2012/02/27/colorful-terminal-in-mac/"/>
    <updated>2012-02-27T13:57:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/27/colorful-terminal-in-mac</id>
    <content type="html"><![CDATA[<p>与Linux相比，Mac OS X的终端总是欠缺些什么。对了，是色彩，Linux的ls命令使用不同颜色区分各种文件类型，Vim编辑器也支持语法高亮，而Mac终端却总是以黑白示人。其实，只要稍微做一些工作，Mac的终端同样可以多姿多彩，请往下看。</p>

<!--more-->


<h2>彩色化ls的输出</h2>

<p>Mac中BSD的ls命令可以使用<code>-G</code>参数彩色化输出的文件列表，需要配置LSCOLORS环境变量定义颜色，具体配置方法可以输入<code>man ls</code>查看。</p>

<p>不过，我推荐安装Linux使用的GNU Coreutils替换Mac的ls命令，因为：</p>

<ul>
<li>Coreutils提供了配置工具，定义颜色代码更加方便；</li>
<li>Coreutils包含的不仅仅是ls，同时作为Linux用户，我更习惯于使用GNU的各种shell工具。</li>
</ul>


<p>Coreutils的安装与配置方法如下：</p>

<ol>
<li><p>通过<a href="../../../../2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装Coreutils<br/>
<code>brew install xz coreutils</code><br/>
注：Coreutils并不依赖于xz，但它的源码是用xz格式压缩的，安装xz才能解压。</p></li>
<li><p>生成颜色定义文件<br/>
<code>gdircolors --print-database &gt; ~/.dir_colors</code></p></li>
<li><p>在<code>~/.bash_profile</code>配置文件中加入以下代码</p></li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span>brew list | grep coreutils &gt; /dev/null ; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;PATH<span class="o">=</span><span class="s2">&quot;$(brew --prefix coreutils)/libexec/gnubin:$PATH&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls -F --show-control-chars --color=auto&#39;</span>
</span><span class='line'><span class="nb">eval</span> <span class="sb">`</span>gdircolors -b <span class="nv">$HOME</span>/.dir_colors<span class="sb">`</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>gdircolor的作用就是设置ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS），我们可以修改~/.dir_colors自定义文件的颜色，此文件中的注释已经包含各种颜色取值的说明。</p>

<p>看看默认颜色的显示效果。<br/>
<img src="../../../../images/2012-02-27-colorful-terminal-in-mac_ls.png" alt="ls screenshot" /></p>

<h2>grep高亮显示关键字</h2>

<p>这个很简单，加上<code>--color</code>参数就可以了，为了使用方便，可以在<code>~/.bash_profile</code>配置文件中加上alias定义。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">grep</span><span class="o">=</span><span class="s1">&#39;grep --color&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">egrep</span><span class="o">=</span><span class="s1">&#39;egrep --color&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">fgrep</span><span class="o">=</span><span class="s1">&#39;fgrep --color&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Vim语法高亮</h2>

<p>在Vim中输入命令<code>:syntax on</code>激活语法高亮，若需要Vim启动时自动激活，在<code>~/.vimrc</code>中添加一行<code>syntax on</code>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew的安装与使用]]></title>
    <link href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/"/>
    <updated>2012-02-25T19:50:00+08:00</updated>
    <id>http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage</id>
    <content type="html"><![CDATA[<p>Mac OS X是基于Unix的操作系统，可以安装大部分为Unix/Linux开发的软件。然而，如果只是以使用为目的，对每个软件都进行手工编译不是很方便，也不利于管理已安装的软件，于是出现了类似于Linux中APT、Yum等类似的软件包管理系统，其中最著名的有MacPorts、Fink、Homebrew等。</p>

<p>我曾经是MacPorts的使用者，但了解Homebrew之后，立即“弃暗投明”了。其实MacPorts也是一个很不错的解决方案，除了一个实在让我头疼的特性。MacPorts有个原则，对于软件包之间的依赖，都在MacPorts内部解决（/opt/local），无论系统本身是否包含了需要的库，都不会加以利用。这使得MacPorts过分的庞大臃肿，导致系统出现大量软件包的冗余，占用不小的磁盘空间，同时稍大型一点的软件编译时间都会难以忍受。</p>

<!--more-->


<p>而Homebrew的原则恰恰相反，它尽可能地利用系统自带的各种库，使得软件包的编译时间大为缩短；同时由于几乎不会造成冗余，软件包的管理也清晰、灵活了许多。Homebrew的另一个特点是使用Ruby定义软件包安装配置（叫做formula），定制非常简单。</p>

<p>至于Fink，由于并未安装使用过，不加讨论。（从互联网上的消息看，Fink由于维护人手的问题，软件包的更新不是很及时。）于我而言，Homebrew已经足够完善，除非发现重大的问题或者出现新的具有突破性的竞争对手，否则我没兴趣折腾别的软件包管理系统了。</p>

<p>下面说说Homebrew的安装与使用。</p>

<h2>Homebrew的安装</h2>

<p>首先确保你的系统满足如下要求：</p>

<ol>
<li>基于Intel CPU</li>
<li>操作系统为Mac OS X 10.5 Leopard或更高版本</li>
<li>已安装版本管理工具Git（Mac OS X 10.7 Lion已经预安装）</li>
<li>已安装Xcode开发工具<sup>1</sup></li>
<li>已安装Java Developer Update<sup>2</sup></li>
</ol>


<p>注1：Xcode 4.3中，命令行编译工具是可选安装，需要在<code>Preferences</code> > <code>Downloads</code>中激活。<br/>
注2：可选，Homebrew本身不依赖于Java，只有部分软件包的安装需要Java支持。</p>

<p>Homebrew的安装非常简单，在终端程序中输入以下命令即可。</p>

<p><code>/usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"</code></p>

<p>安装过程需要输入root口令。</p>

<h2>Homebrew的使用</h2>

<p>Homebrew的可执行命令是brew，其基本使用方法如下（以wget为例）。</p>

<p>查找软件包<br/>
<code>brew search wget</code></p>

<p>安装软件包<br/>
<code>brew install wget</code></p>

<p>列出已安装的软件包<br/>
<code>brew list</code></p>

<p>删除软件包<br/>
<code>brew remove wget</code></p>

<p>查看软件包信息<br/>
<code>brew info wget</code></p>

<p>列出软件包的依赖关系<br/>
<code>brew deps wget</code></p>

<p>更新brew<br/>
<code>brew update</code></p>

<p>列出过时的软件包（已安装但不是最新版本）<br/>
<code>brew outdated</code></p>

<p>更新过时的软件包（全部或指定）<br/>
<code>brew upgrade</code> 或 <code>brew upgrade wget</code></p>

<h2>定制自己的软件包</h2>

<p>如果自己需要的软件包并不能在Homebrew中找到，怎么办呢，毕竟Homebrew是一个新生项目，不可能满足所有人的需求。当然，我们可以自行编译安装，但手工安装的软件包游离于Homebrew之外，管理起来不是很方便。</p>

<p>前文说过，Homebrew使用Ruby实现的软件包配置非常方便，下面简单谈一谈软件包的定制（假定软件包名称是bar，来自foo站点）。</p>

<ol>
<li><p>首先找到待安装软件的源码下载地址<br/>
<code>http://foo.com/bar-1.0.tgz</code></p></li>
<li><p>建立自己的formula<br/>
<code>brew create http://foo.com/bar-1.0.tgz</code></p></li>
<li><p>编辑formula，上一步建立成功后，Homebrew会自动打开新建的formula进行编辑，也可用如下命令打开formula进行编辑。<br/>
<code>brew edit bar</code><br/>
Homebrew自动建立的formula已经包含了基本的<code>configure</code>和<code>make install</code>命令，对于大部分软件，不需要进行修改，退出编辑即可。</p></li>
<li><p>输入以下命令安装自定义的软件包<br/>
<code>brew install bar</code></p></li>
</ol>


<h2></h2>

<p>关于Homebrew的其它功能，比如将自定义软件包提交到官方发布等，请参考Homebrew项目的<a href="http://mxcl.github.com/homebrew/">主页</a>及其Man Page。你将发现Homebrew不仅是“家酿”，更是“佳酿”。</p>
]]></content>
  </entry>
  
</feed>
